=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module GmoPaymentApiClient
  class TokenApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # アクセストークン発行
    # アクセストークン方式の認証に利用するアクセストークンを発行するために呼び出すAPIです。   認証の詳細は[APIの認証](#tag/authentication)を参照ください。 
    # @param grant_type [String] グラントタイプ   &#x60;client_credentials&#x60;を設定してください。 
    # @param scope [String] スコープ &#x60;openapi&#x60;を設定してください。 
    # @param [Hash] opts the optional parameters
    # @return [TokenResponse]
    def token(grant_type, scope, opts = {})
      data, _status_code, _headers = token_with_http_info(grant_type, scope, opts)
      data
    end

    # アクセストークン発行
    # アクセストークン方式の認証に利用するアクセストークンを発行するために呼び出すAPIです。   認証の詳細は[APIの認証](#tag/authentication)を参照ください。 
    # @param grant_type [String] グラントタイプ   &#x60;client_credentials&#x60;を設定してください。 
    # @param scope [String] スコープ &#x60;openapi&#x60;を設定してください。 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenResponse, Integer, Hash)>] TokenResponse data, response status code and response headers
    def token_with_http_info(grant_type, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokenApi.token ...'
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling TokenApi.token"
      end
      # verify enum value
      allowable_values = ["client_credentials"]
      if @api_client.config.client_side_validation && !allowable_values.include?(grant_type)
        fail ArgumentError, "invalid value for \"grant_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling TokenApi.token"
      end
      # verify enum value
      allowable_values = ["openapi"]
      if @api_client.config.client_side_validation && !allowable_values.include?(scope)
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['grant_type'] = grant_type
      form_params['scope'] = scope

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Password']

      new_options = opts.merge(
        :operation => :"TokenApi.token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenApi#token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
