=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # 現金払いオプション情報
  class CashOptions
    attr_accessor :konbini_code

    # 支払い期間(日)   お客様がお支払いできる期間を日数で設定します。   期間最終日の23時59分59秒までお支払いが可能です。   例) 2024年1月1日12時に支払い期限日`10`の場合、支払い期限は2024年1月11日23時59分59秒です。   日時形式で設定する場合は、支払い期限日時`paymentExpiryDateTime`パラメーターをご利用ください。   支払い期間(日)`paymentPeriod`と支払い期限日時`paymentExpiryDateTime`の両方を設定すると、支払い期限日時`paymentExpiryDateTime`が優先されます。   <br> 現金払いタイプ `cashType`、支払先コンビニコード `konbiniCode`により設定可能な値が異なります。    <table>   <thead>     <tr>       <th>現金払いタイプ<br><code>cashType</code></th>       <th>支払先<br>コンビニコード<br><code>konbiniCode</code></th>       <th style=\"text-align: center;\">最小</th>       <th style=\"text-align: center;\">最大</th>       <th style=\"text-align: center;\"><code>999</code>設定時</th>       <th>省略時</th>     </tr>   </thead>   <tbody>     <tr>       <td rowspan=\"5\">コンビニ<br><code>KONBINI</code></td>       <td>セブン-イレブン<br><code>SEVEN_ELEVEN</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">150</td>       <td style=\"text-align: center;\">150</td>       <td><small>デフォルト値<sup>*1</sup></small></td>     </tr>     <tr>       <td>ローソン<br><code>LAWSON</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">180</td>       <td style=\"text-align: center;\">180</td>       <td><small>デフォルト値<sup>*1</sup></small></td>     </tr>     <tr>       <td>ファミリーマート<br><code>FAMILYMART</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">60</td>       <td style=\"text-align: center;\">60</td>       <td><small>デフォルト値<sup>*1</sup></small></td>     </tr>     <tr>       <td>ミニストップ<br><code>MINISTOP</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">180</td>       <td style=\"text-align: center;\">180</td>       <td><small>デフォルト値<sup>*1</sup></small></td>     </tr>     <tr>       <td>セイコーマート<br><code>SEICOMART</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">180</td>       <td style=\"text-align: center;\">180</td>       <td><small>デフォルト値<sup>*1</sup></small></td>     </tr>     <tr>       <td colspan=\"2\">Pay-easy<br><code>PAYEASY</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">60</td>       <td style=\"text-align: center;\">エラー</td>       <td><small>デフォルト値<sup>*1</sup></small></td>     </tr>     <tr>       <td colspan=\"2\">銀行振込(バーチャル口座)<br><code>BANK_TRANSFER_SMBC</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">99</td>       <td style=\"text-align: center;\">エラー</td>       <td>省略不可</td>     </tr>     <tr>       <td colspan=\"2\">銀行振込(バーチャル口座あおぞら)<br><code>BANK_TRANSFER_GMO_AOZORA</code></td>       <td style=\"text-align: center;\">0<br>(当日)</td>       <td style=\"text-align: center;\">999</td>       <td style=\"text-align: center;\">999</td>       <td>支払い期限なし</td>     </tr>   </tbody> </table>  *1：デフォルト値は管理画面から設定します。変更の方法はこちらの[FAQページ](https://mp-faq.gmo-pg.com/s/article/D00103)を参照ください。   
    attr_accessor :payment_period

    # 支払い期限日時   お客様が支払いできる期限を日時(YYYYMMDDHHMM)形式で設定します。   <br> 現金払いタイプ `cashType`、支払先コンビニコード `konbiniCode`により設定可能な値が異なります。    <table>     <thead>         <tr>             <th>現金払いタイプ<br><code>cashType</code></th>             <th>支払先<br>コンビニコード<br><code>konbiniCode</code></th>             <th style=\"text-align: center;\">利用</th>             <th>最大</th>             <th>注意事項</th>         </tr>     </thead>     <tbody>         <tr>             <td rowspan=\"5\">コンビニ<br><code>KONBINI</code></td>             <td>セブン-イレブン<br><code>SEVEN_ELEVEN</code></td>             <td style=\"text-align: center;\">×</td>             <td style=\"text-align: center;\">-</td>             <td>設定するとエラー</td>         </tr>         <tr>             <td>ローソン<br><code>LAWSON</code></td>             <td style=\"text-align: center;\">〇</td>             <td>181日後の0時0分</td>             <td></td>         </tr>         <tr>             <td>ファミリーマート<br><code>FAMILYMART</code></td>             <td style=\"text-align: center;\">〇</td>             <td>61日後の0時0分</td>             <td></td>         </tr>         <tr>             <td>ミニストップ<br><code>MINISTOP</code></td>             <td style=\"text-align: center;\">〇</td>             <td>181日後の0時0分</td>             <td></td>         </tr>         <tr>             <td>セイコーマート<br><code>SEICOMART</code></td>             <td style=\"text-align: center;\">〇</td>             <td>181日後の0時0分</td>             <td>時分に<code>0001</code>は<br>設定不可</td>         </tr>         <tr>             <td colspan=\"2\">Pay-easy<br><code>PAYEASY</code></td>             <td style=\"text-align: center;\">〇</td>             <td>61日後の0時0分</td>             <td></td>         </tr>         <tr>             <td colspan=\"2\">銀行振込(バーチャル口座)<br><code>BANK_TRANSFER_SMBC</code></td>             <td style=\"text-align: center;\">×</td>             <td style=\"text-align: center;\">-</td>             <td>設定するとエラー</td>         </tr>         <tr>             <td colspan=\"2\">銀行振込(バーチャル口座あおぞら)<br><code>BANK_TRANSFER_GMO_AOZORA</code></td>             <td style=\"text-align: center;\">×</td>             <td style=\"text-align: center;\">-</td>             <td>設定するとエラー</td>         </tr>     </tbody> </table>
    attr_accessor :payment_expiry_date_time

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'konbini_code' => :'konbiniCode',
        :'payment_period' => :'paymentPeriod',
        :'payment_expiry_date_time' => :'paymentExpiryDateTime'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'konbini_code' => :'Mulpay2',
        :'payment_period' => :'String',
        :'payment_expiry_date_time' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::CashOptions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::CashOptions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'konbini_code')
        self.konbini_code = attributes[:'konbini_code']
      end

      if attributes.key?(:'payment_period')
        self.payment_period = attributes[:'payment_period']
      end

      if attributes.key?(:'payment_expiry_date_time')
        self.payment_expiry_date_time = attributes[:'payment_expiry_date_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[0-9]{1,3}$/)
      if !@payment_period.nil? && @payment_period !~ pattern
        invalid_properties.push("invalid value for \"payment_period\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@payment_period.nil? && @payment_period !~ Regexp.new(/^[0-9]{1,3}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_period Value to be assigned
    def payment_period=(payment_period)
      if payment_period.nil?
        fail ArgumentError, 'payment_period cannot be nil'
      end

      pattern = Regexp.new(/^[0-9]{1,3}$/)
      if payment_period !~ pattern
        fail ArgumentError, "invalid value for \"payment_period\", must conform to the pattern #{pattern}."
      end

      @payment_period = payment_period
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          konbini_code == o.konbini_code &&
          payment_period == o.payment_period &&
          payment_expiry_date_time == o.payment_expiry_date_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [konbini_code, payment_period, payment_expiry_date_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
