=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # 画面・明細表示情報
  class DisplayInformation
    # POSレジ表示欄1   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display1

    # POSレジ表示欄2   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display2

    # POSレジ表示欄3   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display3

    # POSレジ表示欄4   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display4

    # POSレジ表示欄5   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display5

    # POSレジ表示欄6   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display6

    # POSレジ表示欄7   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display7

    # POSレジ表示欄8   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。 
    attr_accessor :register_display8

    # 明細表示欄1   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display1

    # 明細表示欄2   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display2

    # 明細表示欄3   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display3

    # 明細表示欄4   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display4

    # 明細表示欄5   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display5

    # 明細表示欄6   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display6

    # 明細表示欄7   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display7

    # 明細表示欄8   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display8

    # 明細表示欄9   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display9

    # 明細表示欄10   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。 
    attr_accessor :receipt_display10

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'register_display1' => :'registerDisplay1',
        :'register_display2' => :'registerDisplay2',
        :'register_display3' => :'registerDisplay3',
        :'register_display4' => :'registerDisplay4',
        :'register_display5' => :'registerDisplay5',
        :'register_display6' => :'registerDisplay6',
        :'register_display7' => :'registerDisplay7',
        :'register_display8' => :'registerDisplay8',
        :'receipt_display1' => :'receiptDisplay1',
        :'receipt_display2' => :'receiptDisplay2',
        :'receipt_display3' => :'receiptDisplay3',
        :'receipt_display4' => :'receiptDisplay4',
        :'receipt_display5' => :'receiptDisplay5',
        :'receipt_display6' => :'receiptDisplay6',
        :'receipt_display7' => :'receiptDisplay7',
        :'receipt_display8' => :'receiptDisplay8',
        :'receipt_display9' => :'receiptDisplay9',
        :'receipt_display10' => :'receiptDisplay10'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'register_display1' => :'String',
        :'register_display2' => :'String',
        :'register_display3' => :'String',
        :'register_display4' => :'String',
        :'register_display5' => :'String',
        :'register_display6' => :'String',
        :'register_display7' => :'String',
        :'register_display8' => :'String',
        :'receipt_display1' => :'String',
        :'receipt_display2' => :'String',
        :'receipt_display3' => :'String',
        :'receipt_display4' => :'String',
        :'receipt_display5' => :'String',
        :'receipt_display6' => :'String',
        :'receipt_display7' => :'String',
        :'receipt_display8' => :'String',
        :'receipt_display9' => :'String',
        :'receipt_display10' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::DisplayInformation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::DisplayInformation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'register_display1')
        self.register_display1 = attributes[:'register_display1']
      end

      if attributes.key?(:'register_display2')
        self.register_display2 = attributes[:'register_display2']
      end

      if attributes.key?(:'register_display3')
        self.register_display3 = attributes[:'register_display3']
      end

      if attributes.key?(:'register_display4')
        self.register_display4 = attributes[:'register_display4']
      end

      if attributes.key?(:'register_display5')
        self.register_display5 = attributes[:'register_display5']
      end

      if attributes.key?(:'register_display6')
        self.register_display6 = attributes[:'register_display6']
      end

      if attributes.key?(:'register_display7')
        self.register_display7 = attributes[:'register_display7']
      end

      if attributes.key?(:'register_display8')
        self.register_display8 = attributes[:'register_display8']
      end

      if attributes.key?(:'receipt_display1')
        self.receipt_display1 = attributes[:'receipt_display1']
      end

      if attributes.key?(:'receipt_display2')
        self.receipt_display2 = attributes[:'receipt_display2']
      end

      if attributes.key?(:'receipt_display3')
        self.receipt_display3 = attributes[:'receipt_display3']
      end

      if attributes.key?(:'receipt_display4')
        self.receipt_display4 = attributes[:'receipt_display4']
      end

      if attributes.key?(:'receipt_display5')
        self.receipt_display5 = attributes[:'receipt_display5']
      end

      if attributes.key?(:'receipt_display6')
        self.receipt_display6 = attributes[:'receipt_display6']
      end

      if attributes.key?(:'receipt_display7')
        self.receipt_display7 = attributes[:'receipt_display7']
      end

      if attributes.key?(:'receipt_display8')
        self.receipt_display8 = attributes[:'receipt_display8']
      end

      if attributes.key?(:'receipt_display9')
        self.receipt_display9 = attributes[:'receipt_display9']
      end

      if attributes.key?(:'receipt_display10')
        self.receipt_display10 = attributes[:'receipt_display10']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@register_display1.nil? && @register_display1.to_s.length > 32
        invalid_properties.push('invalid value for "register_display1", the character length must be smaller than or equal to 32.')
      end

      if !@register_display2.nil? && @register_display2.to_s.length > 32
        invalid_properties.push('invalid value for "register_display2", the character length must be smaller than or equal to 32.')
      end

      if !@register_display3.nil? && @register_display3.to_s.length > 32
        invalid_properties.push('invalid value for "register_display3", the character length must be smaller than or equal to 32.')
      end

      if !@register_display4.nil? && @register_display4.to_s.length > 32
        invalid_properties.push('invalid value for "register_display4", the character length must be smaller than or equal to 32.')
      end

      if !@register_display5.nil? && @register_display5.to_s.length > 32
        invalid_properties.push('invalid value for "register_display5", the character length must be smaller than or equal to 32.')
      end

      if !@register_display6.nil? && @register_display6.to_s.length > 32
        invalid_properties.push('invalid value for "register_display6", the character length must be smaller than or equal to 32.')
      end

      if !@register_display7.nil? && @register_display7.to_s.length > 32
        invalid_properties.push('invalid value for "register_display7", the character length must be smaller than or equal to 32.')
      end

      if !@register_display8.nil? && @register_display8.to_s.length > 32
        invalid_properties.push('invalid value for "register_display8", the character length must be smaller than or equal to 32.')
      end

      if !@receipt_display1.nil? && @receipt_display1.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display1", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display2.nil? && @receipt_display2.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display2", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display3.nil? && @receipt_display3.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display3", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display4.nil? && @receipt_display4.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display4", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display5.nil? && @receipt_display5.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display5", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display6.nil? && @receipt_display6.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display6", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display7.nil? && @receipt_display7.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display7", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display8.nil? && @receipt_display8.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display8", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display9.nil? && @receipt_display9.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display9", the character length must be smaller than or equal to 60.')
      end

      if !@receipt_display10.nil? && @receipt_display10.to_s.length > 60
        invalid_properties.push('invalid value for "receipt_display10", the character length must be smaller than or equal to 60.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@register_display1.nil? && @register_display1.to_s.length > 32
      return false if !@register_display2.nil? && @register_display2.to_s.length > 32
      return false if !@register_display3.nil? && @register_display3.to_s.length > 32
      return false if !@register_display4.nil? && @register_display4.to_s.length > 32
      return false if !@register_display5.nil? && @register_display5.to_s.length > 32
      return false if !@register_display6.nil? && @register_display6.to_s.length > 32
      return false if !@register_display7.nil? && @register_display7.to_s.length > 32
      return false if !@register_display8.nil? && @register_display8.to_s.length > 32
      return false if !@receipt_display1.nil? && @receipt_display1.to_s.length > 60
      return false if !@receipt_display2.nil? && @receipt_display2.to_s.length > 60
      return false if !@receipt_display3.nil? && @receipt_display3.to_s.length > 60
      return false if !@receipt_display4.nil? && @receipt_display4.to_s.length > 60
      return false if !@receipt_display5.nil? && @receipt_display5.to_s.length > 60
      return false if !@receipt_display6.nil? && @receipt_display6.to_s.length > 60
      return false if !@receipt_display7.nil? && @receipt_display7.to_s.length > 60
      return false if !@receipt_display8.nil? && @receipt_display8.to_s.length > 60
      return false if !@receipt_display9.nil? && @receipt_display9.to_s.length > 60
      return false if !@receipt_display10.nil? && @receipt_display10.to_s.length > 60
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display1 Value to be assigned
    def register_display1=(register_display1)
      if register_display1.nil?
        fail ArgumentError, 'register_display1 cannot be nil'
      end

      if register_display1.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display1", the character length must be smaller than or equal to 32.'
      end

      @register_display1 = register_display1
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display2 Value to be assigned
    def register_display2=(register_display2)
      if register_display2.nil?
        fail ArgumentError, 'register_display2 cannot be nil'
      end

      if register_display2.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display2", the character length must be smaller than or equal to 32.'
      end

      @register_display2 = register_display2
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display3 Value to be assigned
    def register_display3=(register_display3)
      if register_display3.nil?
        fail ArgumentError, 'register_display3 cannot be nil'
      end

      if register_display3.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display3", the character length must be smaller than or equal to 32.'
      end

      @register_display3 = register_display3
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display4 Value to be assigned
    def register_display4=(register_display4)
      if register_display4.nil?
        fail ArgumentError, 'register_display4 cannot be nil'
      end

      if register_display4.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display4", the character length must be smaller than or equal to 32.'
      end

      @register_display4 = register_display4
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display5 Value to be assigned
    def register_display5=(register_display5)
      if register_display5.nil?
        fail ArgumentError, 'register_display5 cannot be nil'
      end

      if register_display5.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display5", the character length must be smaller than or equal to 32.'
      end

      @register_display5 = register_display5
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display6 Value to be assigned
    def register_display6=(register_display6)
      if register_display6.nil?
        fail ArgumentError, 'register_display6 cannot be nil'
      end

      if register_display6.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display6", the character length must be smaller than or equal to 32.'
      end

      @register_display6 = register_display6
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display7 Value to be assigned
    def register_display7=(register_display7)
      if register_display7.nil?
        fail ArgumentError, 'register_display7 cannot be nil'
      end

      if register_display7.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display7", the character length must be smaller than or equal to 32.'
      end

      @register_display7 = register_display7
    end

    # Custom attribute writer method with validation
    # @param [Object] register_display8 Value to be assigned
    def register_display8=(register_display8)
      if register_display8.nil?
        fail ArgumentError, 'register_display8 cannot be nil'
      end

      if register_display8.to_s.length > 32
        fail ArgumentError, 'invalid value for "register_display8", the character length must be smaller than or equal to 32.'
      end

      @register_display8 = register_display8
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display1 Value to be assigned
    def receipt_display1=(receipt_display1)
      if receipt_display1.nil?
        fail ArgumentError, 'receipt_display1 cannot be nil'
      end

      if receipt_display1.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display1", the character length must be smaller than or equal to 60.'
      end

      @receipt_display1 = receipt_display1
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display2 Value to be assigned
    def receipt_display2=(receipt_display2)
      if receipt_display2.nil?
        fail ArgumentError, 'receipt_display2 cannot be nil'
      end

      if receipt_display2.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display2", the character length must be smaller than or equal to 60.'
      end

      @receipt_display2 = receipt_display2
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display3 Value to be assigned
    def receipt_display3=(receipt_display3)
      if receipt_display3.nil?
        fail ArgumentError, 'receipt_display3 cannot be nil'
      end

      if receipt_display3.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display3", the character length must be smaller than or equal to 60.'
      end

      @receipt_display3 = receipt_display3
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display4 Value to be assigned
    def receipt_display4=(receipt_display4)
      if receipt_display4.nil?
        fail ArgumentError, 'receipt_display4 cannot be nil'
      end

      if receipt_display4.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display4", the character length must be smaller than or equal to 60.'
      end

      @receipt_display4 = receipt_display4
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display5 Value to be assigned
    def receipt_display5=(receipt_display5)
      if receipt_display5.nil?
        fail ArgumentError, 'receipt_display5 cannot be nil'
      end

      if receipt_display5.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display5", the character length must be smaller than or equal to 60.'
      end

      @receipt_display5 = receipt_display5
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display6 Value to be assigned
    def receipt_display6=(receipt_display6)
      if receipt_display6.nil?
        fail ArgumentError, 'receipt_display6 cannot be nil'
      end

      if receipt_display6.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display6", the character length must be smaller than or equal to 60.'
      end

      @receipt_display6 = receipt_display6
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display7 Value to be assigned
    def receipt_display7=(receipt_display7)
      if receipt_display7.nil?
        fail ArgumentError, 'receipt_display7 cannot be nil'
      end

      if receipt_display7.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display7", the character length must be smaller than or equal to 60.'
      end

      @receipt_display7 = receipt_display7
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display8 Value to be assigned
    def receipt_display8=(receipt_display8)
      if receipt_display8.nil?
        fail ArgumentError, 'receipt_display8 cannot be nil'
      end

      if receipt_display8.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display8", the character length must be smaller than or equal to 60.'
      end

      @receipt_display8 = receipt_display8
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display9 Value to be assigned
    def receipt_display9=(receipt_display9)
      if receipt_display9.nil?
        fail ArgumentError, 'receipt_display9 cannot be nil'
      end

      if receipt_display9.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display9", the character length must be smaller than or equal to 60.'
      end

      @receipt_display9 = receipt_display9
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_display10 Value to be assigned
    def receipt_display10=(receipt_display10)
      if receipt_display10.nil?
        fail ArgumentError, 'receipt_display10 cannot be nil'
      end

      if receipt_display10.to_s.length > 60
        fail ArgumentError, 'invalid value for "receipt_display10", the character length must be smaller than or equal to 60.'
      end

      @receipt_display10 = receipt_display10
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          register_display1 == o.register_display1 &&
          register_display2 == o.register_display2 &&
          register_display3 == o.register_display3 &&
          register_display4 == o.register_display4 &&
          register_display5 == o.register_display5 &&
          register_display6 == o.register_display6 &&
          register_display7 == o.register_display7 &&
          register_display8 == o.register_display8 &&
          receipt_display1 == o.receipt_display1 &&
          receipt_display2 == o.receipt_display2 &&
          receipt_display3 == o.receipt_display3 &&
          receipt_display4 == o.receipt_display4 &&
          receipt_display5 == o.receipt_display5 &&
          receipt_display6 == o.receipt_display6 &&
          receipt_display7 == o.receipt_display7 &&
          receipt_display8 == o.receipt_display8 &&
          receipt_display9 == o.receipt_display9 &&
          receipt_display10 == o.receipt_display10
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [register_display1, register_display2, register_display3, register_display4, register_display5, register_display6, register_display7, register_display8, receipt_display1, receipt_display2, receipt_display3, receipt_display4, receipt_display5, receipt_display6, receipt_display7, receipt_display8, receipt_display9, receipt_display10].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
