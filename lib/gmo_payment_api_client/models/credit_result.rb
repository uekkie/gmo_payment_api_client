=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # カード支払い結果情報
  class CreditResult
    # カードのタイプ   - `CREDIT_CARD`：クレジットカード - `APPLE_PAY`：Apple Pay - `GOOGLE_PAY`：Google Pay 
    attr_accessor :card_type

    attr_accessor :card_result

    # 仕向先カード会社コード   従来の接続方式であるプロトコル/モジュールタイプにおける`Forward`です。 
    attr_accessor :forwarded_acquirer_code

    # カード会社が発行した承認番号   従来の接続方式であるプロトコル/モジュールタイプにおける`Approve`です。 
    attr_accessor :approval_code

    # クレジットカードネットワーク事業者が取引を特定するためのID   従来の接続方式であるプロトコル/モジュールタイプにおける`TranID`です。 
    attr_accessor :nw_transaction_id

    # 処理日時   [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)で定義された表記   例) 2023-05-30T12:34:56+09:00 
    attr_accessor :transaction_date_time

    # 仮売上有効日時   [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)で定義された表記   例) 2023-06-30T12:34:56+09:00 
    attr_accessor :capture_expiry_date_time

    # 3Dセキュアの利用有無   当該取引が3Dセキュア認証済である場合は`true`です。 
    attr_accessor :use_tds2

    # 不正検知の利用有無
    attr_accessor :use_fraud_detection

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'card_type' => :'cardType',
        :'card_result' => :'cardResult',
        :'forwarded_acquirer_code' => :'forwardedAcquirerCode',
        :'approval_code' => :'approvalCode',
        :'nw_transaction_id' => :'nwTransactionId',
        :'transaction_date_time' => :'transactionDateTime',
        :'capture_expiry_date_time' => :'captureExpiryDateTime',
        :'use_tds2' => :'useTds2',
        :'use_fraud_detection' => :'useFraudDetection'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'card_type' => :'String',
        :'card_result' => :'CardResult',
        :'forwarded_acquirer_code' => :'String',
        :'approval_code' => :'String',
        :'nw_transaction_id' => :'String',
        :'transaction_date_time' => :'Time',
        :'capture_expiry_date_time' => :'Time',
        :'use_tds2' => :'Boolean',
        :'use_fraud_detection' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::CreditResult` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::CreditResult`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'card_type')
        self.card_type = attributes[:'card_type']
      end

      if attributes.key?(:'card_result')
        self.card_result = attributes[:'card_result']
      end

      if attributes.key?(:'forwarded_acquirer_code')
        self.forwarded_acquirer_code = attributes[:'forwarded_acquirer_code']
      end

      if attributes.key?(:'approval_code')
        self.approval_code = attributes[:'approval_code']
      end

      if attributes.key?(:'nw_transaction_id')
        self.nw_transaction_id = attributes[:'nw_transaction_id']
      end

      if attributes.key?(:'transaction_date_time')
        self.transaction_date_time = attributes[:'transaction_date_time']
      end

      if attributes.key?(:'capture_expiry_date_time')
        self.capture_expiry_date_time = attributes[:'capture_expiry_date_time']
      end

      if attributes.key?(:'use_tds2')
        self.use_tds2 = attributes[:'use_tds2']
      end

      if attributes.key?(:'use_fraud_detection')
        self.use_fraud_detection = attributes[:'use_fraud_detection']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      card_type_validator = EnumAttributeValidator.new('String', ["CREDIT_CARD", "APPLE_PAY", "GOOGLE_PAY"])
      return false unless card_type_validator.valid?(@card_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_type Object to be assigned
    def card_type=(card_type)
      validator = EnumAttributeValidator.new('String', ["CREDIT_CARD", "APPLE_PAY", "GOOGLE_PAY"])
      unless validator.valid?(card_type)
        fail ArgumentError, "invalid value for \"card_type\", must be one of #{validator.allowable_values}."
      end
      @card_type = card_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          card_type == o.card_type &&
          card_result == o.card_result &&
          forwarded_acquirer_code == o.forwarded_acquirer_code &&
          approval_code == o.approval_code &&
          nw_transaction_id == o.nw_transaction_id &&
          transaction_date_time == o.transaction_date_time &&
          capture_expiry_date_time == o.capture_expiry_date_time &&
          use_tds2 == o.use_tds2 &&
          use_fraud_detection == o.use_fraud_detection
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [card_type, card_result, forwarded_acquirer_code, approval_code, nw_transaction_id, transaction_date_time, capture_expiry_date_time, use_tds2, use_fraud_detection].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
