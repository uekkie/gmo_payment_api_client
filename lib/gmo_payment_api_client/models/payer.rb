=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # 購入者情報   決済手段ごとの指定要否や各パラメーターの用途は、本セクション冒頭の「共通パラメーター対応表」を参照してください。 
  class Payer
    # 購入者の氏名(フルネーム)   設定できる最大長はUTF-8で60byteです。 
    attr_accessor :name

    # 購入者の氏名(全角カナのみ)   設定できる最大長はUTF-8で60byteです。 
    attr_accessor :name_kana

    # 購入者の氏名(英名) 
    attr_accessor :name_alphabet

    # 購入者の性別 
    attr_accessor :gender

    # 購入者の誕生日   YYYYMMDD形式 
    attr_accessor :date_of_birth

    # 購入者のメールアドレス   [RFC 5322](https://www.rfc-editor.org/rfc/rfc5322)の仕様に沿った形式のみ許可されます。 
    attr_accessor :email

    # 取引内容がWebチケットなどの電子デリバリーの場合、配信先のメールアドレスを設定します。   [RFC 5322](https://www.rfc-editor.org/rfc/rfc5322)の仕様に沿った形式のみ許可されます。 
    attr_accessor :delivery_email

    # 購入者の電話情報一覧
    attr_accessor :phones

    # 加盟店様サイト上における購入者のアカウントIDなど、一意に識別するためのID
    attr_accessor :account_id

    # 購入者の発信元IPアドレス
    attr_accessor :ip

    # 購入者のデバイス情報をWeb、アプリから選択 - `PC_WEB`：PC(Web) - `PC_APP`：PC(アプリ) - `MOBILE_WEB`：モバイル(Web) - `MOBILE_APP`：モバイル(アプリ) 
    attr_accessor :device_type

    # 購入者のブラウザのUserAgent   半角英数字記号が設定可能です。 
    attr_accessor :http_user_agent

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'name_kana' => :'nameKana',
        :'name_alphabet' => :'nameAlphabet',
        :'gender' => :'gender',
        :'date_of_birth' => :'dateOfBirth',
        :'email' => :'email',
        :'delivery_email' => :'deliveryEmail',
        :'phones' => :'phones',
        :'account_id' => :'accountId',
        :'ip' => :'ip',
        :'device_type' => :'deviceType',
        :'http_user_agent' => :'httpUserAgent'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'name_kana' => :'String',
        :'name_alphabet' => :'String',
        :'gender' => :'String',
        :'date_of_birth' => :'String',
        :'email' => :'String',
        :'delivery_email' => :'String',
        :'phones' => :'Array<Phone>',
        :'account_id' => :'String',
        :'ip' => :'String',
        :'device_type' => :'String',
        :'http_user_agent' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::Payer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::Payer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'name_kana')
        self.name_kana = attributes[:'name_kana']
      end

      if attributes.key?(:'name_alphabet')
        self.name_alphabet = attributes[:'name_alphabet']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'delivery_email')
        self.delivery_email = attributes[:'delivery_email']
      end

      if attributes.key?(:'phones')
        if (value = attributes[:'phones']).is_a?(Array)
          self.phones = value
        end
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'ip')
        self.ip = attributes[:'ip']
      end

      if attributes.key?(:'device_type')
        self.device_type = attributes[:'device_type']
      end

      if attributes.key?(:'http_user_agent')
        self.http_user_agent = attributes[:'http_user_agent']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 40
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 40.')
      end

      pattern = Regexp.new(/^[ァ-ヶー　]+$/)
      if !@name_kana.nil? && @name_kana !~ pattern
        invalid_properties.push("invalid value for \"name_kana\", must conform to the pattern #{pattern}.")
      end

      if !@name_alphabet.nil? && @name_alphabet.to_s.length > 30
        invalid_properties.push('invalid value for "name_alphabet", the character length must be smaller than or equal to 30.')
      end

      # PATCHED
      # pattern = Regexp.new(/^[a-zA-Z0-9 \\x2c-\\x2f]+$/)
      pattern = Regexp.new(/^[a-zA-Z0-9 ,-\/]+$/)

      if !@name_alphabet.nil? && @name_alphabet !~ pattern
        invalid_properties.push("invalid value for \"name_alphabet\", must conform to the pattern #{pattern}.")
      end

      if !@email.nil? && @email.to_s.length > 254
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 254.')
      end

      if !@delivery_email.nil? && @delivery_email.to_s.length > 254
        invalid_properties.push('invalid value for "delivery_email", the character length must be smaller than or equal to 254.')
      end

      if !@account_id.nil? && @account_id.to_s.length > 60
        invalid_properties.push('invalid value for "account_id", the character length must be smaller than or equal to 60.')
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-@_ . ]$/)
      if !@account_id.nil? && @account_id !~ pattern
        invalid_properties.push("invalid value for \"account_id\", must conform to the pattern #{pattern}.")
      end

      if !@ip.nil? && @ip.to_s.length > 39
        invalid_properties.push('invalid value for "ip", the character length must be smaller than or equal to 39.')
      end

      if !@http_user_agent.nil? && @http_user_agent.to_s.length > 512
        invalid_properties.push('invalid value for "http_user_agent", the character length must be smaller than or equal to 512.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @name.to_s.length > 40
      return false if !@name_kana.nil? && @name_kana !~ Regexp.new(/^[ァ-ヶー　]+$/)
      return false if !@name_alphabet.nil? && @name_alphabet.to_s.length > 30
      
      # return false if !@name_alphabet.nil? && @name_alphabet !~ Regexp.new(/^[a-zA-Z0-9 \\x2c-\\x2f]+$/)
      return false if !@name_alphabet.nil? && @name_alphabet !~ Regexp.new(/^[a-zA-Z0-9 ,-\/]+$/)
      gender_validator = EnumAttributeValidator.new('String', ["MALE", "FEMALE", "OTHER"])
      return false unless gender_validator.valid?(@gender)
      return false if !@email.nil? && @email.to_s.length > 254
      return false if !@delivery_email.nil? && @delivery_email.to_s.length > 254
      return false if !@account_id.nil? && @account_id.to_s.length > 60
      return false if !@account_id.nil? && @account_id !~ Regexp.new(/^[a-zA-Z0-9-@_ . ]$/)
      return false if !@ip.nil? && @ip.to_s.length > 39
      device_type_validator = EnumAttributeValidator.new('String', ["PC_WEB", "PC_APP", "MOBILE_WEB", "MOBILE_APP"])
      return false unless device_type_validator.valid?(@device_type)
      return false if !@http_user_agent.nil? && @http_user_agent.to_s.length > 512
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 40
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 40.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] name_kana Value to be assigned
    def name_kana=(name_kana)
      if name_kana.nil?
        fail ArgumentError, 'name_kana cannot be nil'
      end

      pattern = Regexp.new(/^[ァ-ヶー　]+$/)
      if name_kana !~ pattern
        fail ArgumentError, "invalid value for \"name_kana\", must conform to the pattern #{pattern}."
      end

      @name_kana = name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] name_alphabet Value to be assigned
    def name_alphabet=(name_alphabet)
      if name_alphabet.nil?
        fail ArgumentError, 'name_alphabet cannot be nil'
      end

      if name_alphabet.to_s.length > 30
        fail ArgumentError, 'invalid value for "name_alphabet", the character length must be smaller than or equal to 30.'
      end

      # pattern = Regexp.new(/^[a-zA-Z0-9 \\x2c-\\x2f]+$/)
      pattern = Regexp.new(/^[a-zA-Z0-9 ,-\/]+$/)
      
      if name_alphabet !~ pattern
        fail ArgumentError, "invalid value for \"name_alphabet\", must conform to the pattern #{pattern}."
      end

      @name_alphabet = name_alphabet
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["MALE", "FEMALE", "OTHER"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 254
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 254.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_email Value to be assigned
    def delivery_email=(delivery_email)
      if delivery_email.nil?
        fail ArgumentError, 'delivery_email cannot be nil'
      end

      if delivery_email.to_s.length > 254
        fail ArgumentError, 'invalid value for "delivery_email", the character length must be smaller than or equal to 254.'
      end

      @delivery_email = delivery_email
    end

    # Custom attribute writer method with validation
    # @param [Object] account_id Value to be assigned
    def account_id=(account_id)
      if account_id.nil?
        fail ArgumentError, 'account_id cannot be nil'
      end

      if account_id.to_s.length > 60
        fail ArgumentError, 'invalid value for "account_id", the character length must be smaller than or equal to 60.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9-@_ . ]$/)
      if account_id !~ pattern
        fail ArgumentError, "invalid value for \"account_id\", must conform to the pattern #{pattern}."
      end

      @account_id = account_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ip Value to be assigned
    def ip=(ip)
      if ip.nil?
        fail ArgumentError, 'ip cannot be nil'
      end

      if ip.to_s.length > 39
        fail ArgumentError, 'invalid value for "ip", the character length must be smaller than or equal to 39.'
      end

      @ip = ip
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_type Object to be assigned
    def device_type=(device_type)
      validator = EnumAttributeValidator.new('String', ["PC_WEB", "PC_APP", "MOBILE_WEB", "MOBILE_APP"])
      unless validator.valid?(device_type)
        fail ArgumentError, "invalid value for \"device_type\", must be one of #{validator.allowable_values}."
      end
      @device_type = device_type
    end

    # Custom attribute writer method with validation
    # @param [Object] http_user_agent Value to be assigned
    def http_user_agent=(http_user_agent)
      if http_user_agent.nil?
        fail ArgumentError, 'http_user_agent cannot be nil'
      end

      if http_user_agent.to_s.length > 512
        fail ArgumentError, 'invalid value for "http_user_agent", the character length must be smaller than or equal to 512.'
      end

      @http_user_agent = http_user_agent
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          name_kana == o.name_kana &&
          name_alphabet == o.name_alphabet &&
          gender == o.gender &&
          date_of_birth == o.date_of_birth &&
          email == o.email &&
          delivery_email == o.delivery_email &&
          phones == o.phones &&
          account_id == o.account_id &&
          ip == o.ip &&
          device_type == o.device_type &&
          http_user_agent == o.http_user_agent
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, name_kana, name_alphabet, gender, date_of_birth, email, delivery_email, phones, account_id, ip, device_type, http_user_agent].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
