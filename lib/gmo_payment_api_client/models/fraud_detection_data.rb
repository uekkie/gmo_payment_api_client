=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # 不正検知データ情報
  class FraudDetectionData
    # ユーザーID
    attr_accessor :user_id

    # 本人確認書類タイプ   本人確認書類IDに設定する書類タイプを設定します。   本人確認書類IDを設定する場合は省略できません。 - `PASSPORT`：パスポート - `TAXSTATEMENT`：納税証明書 
    attr_accessor :identity_doc_type

    # 本人確認書類ID   設定する場合は本人確認書類タイプも設定する必要があります。 
    attr_accessor :identity_doc_id

    # 配送先会社名
    attr_accessor :shipping_corporation_name

    # 配送先電話番号
    attr_accessor :shipping_phone

    # 配送先メールアドレス
    attr_accessor :shipping_email

    # 配送方法 - `NEXT_DAY_OVERNIGHT`: 翌日発送 - `TWO_DAY_SERVICE`: 2日以内発送 - `THREE_DAY_SERVICE`: 3日以内発送 - `LOWEST_COST`: 最安値の配送方法 - `CARRIER_DESIGNATED_BY_CUSTOMER`:  お客様指定の運送会社 - `ELECTRONIC_DELIVERY`: 電子郵便 - `GROUND`: 陸上輸送 - `INTERNATIONAL`: 国際郵便 - `MILITARY`: 軍事郵便 - `STORE_PICKUP`: 店舗受け取り - `SAME_DAY_SERVICE`: 即日配送 - `OTHER`: その他 - `PUDO`: PUDOステーション - `EXPEDITED`: 速達郵便 
    attr_accessor :shipping_method

    # 送料   <span style=\"color: #d41f1c\">※審査タイプ(screeningType)が`RED_SHIELD`の場合、13桁以上の金額を設定できません。</span> 
    attr_accessor :shipping_amount

    # トラッキング番号
    attr_accessor :shipping_tracking_number

    # 発送時コメント
    attr_accessor :shipping_comment

    # 配送先敬称
    attr_accessor :shipping_salutation

    # デバイス情報
    attr_accessor :device_information

    # リピータフラグ
    attr_accessor :repeater

    # ユーザーID登録後経過日数
    attr_accessor :user_registration_elapsed_days

    # プロモーションコード
    attr_accessor :promotion_code

    # ギフトカードメッセージ
    attr_accessor :gift_card_message

    # ギフトカードタイプ   - `ANNIVERSARY`: 記念日 - `APRIL_FOOLS_DAY`: エイプリルフール - `BABY_SHOWER`: ベビーシャワー - `BIRTHDAY`: 誕生日 - `BOSSES_DAY`: ボスの日 - `CELEBRATE_FALL`: セレブレイト・フォール - `CHINESE_NEW_YEAR`: 春節 - `CHRISTMAS`: クリスマス - `CONGRATULATIONS`: お祝い - `EASTER`: イースター - `FATHERS_DAY`: 父の日 - `GRADUATION`: 卒業 - `GRANDPARENTS_DAY`: 祖父母の日 - `HALLOWEEN`: ハロウィン - `HANUKKAH`: ハヌカー - `HOLIDAY`: 祝日 - `INDEPENDENCE_DAY`: 独立記念日 - `KWANZAA`: クワンザ - `MOTHERS_DAY`: 母の日 - `NEW_YEARS_DAY`: 元日 - `OTHER`: その他 - `PASSOVER`: 過越 - `SEASONS_GREETINGS`: 季節の挨拶 - `SECRETARYS_DAY`: 秘書の日 - `ST_PATRICKS_DAY`: 聖パトリックの祝日 - `SWEETEST_DAY`: スウィーテスト・デー - `THANKSGIVING`: 感謝祭 - `VALENTINES_DAY`:バレンタインデー  - `WEDDING`: 結婚式 
    attr_accessor :gift_card_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'userId',
        :'identity_doc_type' => :'identityDocType',
        :'identity_doc_id' => :'identityDocId',
        :'shipping_corporation_name' => :'shippingCorporationName',
        :'shipping_phone' => :'shippingPhone',
        :'shipping_email' => :'shippingEmail',
        :'shipping_method' => :'shippingMethod',
        :'shipping_amount' => :'shippingAmount',
        :'shipping_tracking_number' => :'shippingTrackingNumber',
        :'shipping_comment' => :'shippingComment',
        :'shipping_salutation' => :'shippingSalutation',
        :'device_information' => :'deviceInformation',
        :'repeater' => :'repeater',
        :'user_registration_elapsed_days' => :'userRegistrationElapsedDays',
        :'promotion_code' => :'promotionCode',
        :'gift_card_message' => :'giftCardMessage',
        :'gift_card_type' => :'giftCardType'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_id' => :'String',
        :'identity_doc_type' => :'String',
        :'identity_doc_id' => :'String',
        :'shipping_corporation_name' => :'String',
        :'shipping_phone' => :'String',
        :'shipping_email' => :'String',
        :'shipping_method' => :'String',
        :'shipping_amount' => :'String',
        :'shipping_tracking_number' => :'String',
        :'shipping_comment' => :'String',
        :'shipping_salutation' => :'String',
        :'device_information' => :'String',
        :'repeater' => :'Boolean',
        :'user_registration_elapsed_days' => :'String',
        :'promotion_code' => :'String',
        :'gift_card_message' => :'String',
        :'gift_card_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::FraudDetectionData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::FraudDetectionData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      else
        self.user_id = nil
      end

      if attributes.key?(:'identity_doc_type')
        self.identity_doc_type = attributes[:'identity_doc_type']
      end

      if attributes.key?(:'identity_doc_id')
        self.identity_doc_id = attributes[:'identity_doc_id']
      end

      if attributes.key?(:'shipping_corporation_name')
        self.shipping_corporation_name = attributes[:'shipping_corporation_name']
      end

      if attributes.key?(:'shipping_phone')
        self.shipping_phone = attributes[:'shipping_phone']
      end

      if attributes.key?(:'shipping_email')
        self.shipping_email = attributes[:'shipping_email']
      end

      if attributes.key?(:'shipping_method')
        self.shipping_method = attributes[:'shipping_method']
      end

      if attributes.key?(:'shipping_amount')
        self.shipping_amount = attributes[:'shipping_amount']
      end

      if attributes.key?(:'shipping_tracking_number')
        self.shipping_tracking_number = attributes[:'shipping_tracking_number']
      end

      if attributes.key?(:'shipping_comment')
        self.shipping_comment = attributes[:'shipping_comment']
      end

      if attributes.key?(:'shipping_salutation')
        self.shipping_salutation = attributes[:'shipping_salutation']
      end

      if attributes.key?(:'device_information')
        self.device_information = attributes[:'device_information']
      end

      if attributes.key?(:'repeater')
        self.repeater = attributes[:'repeater']
      else
        self.repeater = false
      end

      if attributes.key?(:'user_registration_elapsed_days')
        self.user_registration_elapsed_days = attributes[:'user_registration_elapsed_days']
      end

      if attributes.key?(:'promotion_code')
        self.promotion_code = attributes[:'promotion_code']
      end

      if attributes.key?(:'gift_card_message')
        self.gift_card_message = attributes[:'gift_card_message']
      end

      if attributes.key?(:'gift_card_type')
        self.gift_card_type = attributes[:'gift_card_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @user_id.to_s.length > 60
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 60.')
      end

      pattern = Regexp.new(/^[a-zA-Z0-9@_ . -]+$/)
      if @user_id !~ pattern
        invalid_properties.push("invalid value for \"user_id\", must conform to the pattern #{pattern}.")
      end

      if !@identity_doc_id.nil? && @identity_doc_id.to_s.length > 20
        invalid_properties.push('invalid value for "identity_doc_id", the character length must be smaller than or equal to 20.')
      end

      pattern = Regexp.new(/^[0-9a-zA-Z-]+$/)
      if !@identity_doc_id.nil? && @identity_doc_id !~ pattern
        invalid_properties.push("invalid value for \"identity_doc_id\", must conform to the pattern #{pattern}.")
      end

      if !@shipping_corporation_name.nil? && @shipping_corporation_name.to_s.length > 60
        invalid_properties.push('invalid value for "shipping_corporation_name", the character length must be smaller than or equal to 60.')
      end

      if !@shipping_phone.nil? && @shipping_phone.to_s.length > 13
        invalid_properties.push('invalid value for "shipping_phone", the character length must be smaller than or equal to 13.')
      end

      pattern = Regexp.new(/^[0-9-]+$/)
      if !@shipping_phone.nil? && @shipping_phone !~ pattern
        invalid_properties.push("invalid value for \"shipping_phone\", must conform to the pattern #{pattern}.")
      end

      if !@shipping_email.nil? && @shipping_email.to_s.length > 254
        invalid_properties.push('invalid value for "shipping_email", the character length must be smaller than or equal to 254.')
      end

      if !@shipping_amount.nil? && @shipping_amount.to_s.length > 15
        invalid_properties.push('invalid value for "shipping_amount", the character length must be smaller than or equal to 15.')
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@shipping_amount.nil? && @shipping_amount !~ pattern
        invalid_properties.push("invalid value for \"shipping_amount\", must conform to the pattern #{pattern}.")
      end

      if !@shipping_tracking_number.nil? && @shipping_tracking_number.to_s.length > 19
        invalid_properties.push('invalid value for "shipping_tracking_number", the character length must be smaller than or equal to 19.')
      end

      pattern = Regexp.new(/^[0-9a-zA-Z-]+$/)
      if !@shipping_tracking_number.nil? && @shipping_tracking_number !~ pattern
        invalid_properties.push("invalid value for \"shipping_tracking_number\", must conform to the pattern #{pattern}.")
      end

      if !@shipping_comment.nil? && @shipping_comment.to_s.length > 160
        invalid_properties.push('invalid value for "shipping_comment", the character length must be smaller than or equal to 160.')
      end

      if !@shipping_salutation.nil? && @shipping_salutation.to_s.length > 5
        invalid_properties.push('invalid value for "shipping_salutation", the character length must be smaller than or equal to 5.')
      end

      pattern = Regexp.new(/^[ -~｡-ﾟ]+$/)
      if !@shipping_salutation.nil? && @shipping_salutation !~ pattern
        invalid_properties.push("invalid value for \"shipping_salutation\", must conform to the pattern #{pattern}.")
      end

      if !@device_information.nil? && @device_information.to_s.length > 65535
        invalid_properties.push('invalid value for "device_information", the character length must be smaller than or equal to 65535.')
      end

      pattern = Regexp.new(/^[ -~]+$/)
      if !@device_information.nil? && @device_information !~ pattern
        invalid_properties.push("invalid value for \"device_information\", must conform to the pattern #{pattern}.")
      end

      if !@user_registration_elapsed_days.nil? && @user_registration_elapsed_days.to_s.length > 7
        invalid_properties.push('invalid value for "user_registration_elapsed_days", the character length must be smaller than or equal to 7.')
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@user_registration_elapsed_days.nil? && @user_registration_elapsed_days !~ pattern
        invalid_properties.push("invalid value for \"user_registration_elapsed_days\", must conform to the pattern #{pattern}.")
      end

      if !@promotion_code.nil? && @promotion_code.to_s.length > 36
        invalid_properties.push('invalid value for "promotion_code", the character length must be smaller than or equal to 36.')
      end

      pattern = Regexp.new(/^[0-9a-zA-Z-]+$/)
      if !@promotion_code.nil? && @promotion_code !~ pattern
        invalid_properties.push("invalid value for \"promotion_code\", must conform to the pattern #{pattern}.")
      end

      if !@gift_card_message.nil? && @gift_card_message.to_s.length > 160
        invalid_properties.push('invalid value for "gift_card_message", the character length must be smaller than or equal to 160.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @user_id.nil?
      return false if @user_id.to_s.length > 60
      return false if @user_id !~ Regexp.new(/^[a-zA-Z0-9@_ . -]+$/)
      identity_doc_type_validator = EnumAttributeValidator.new('String', ["PASSPORT", "TAXSTATEMENT"])
      return false unless identity_doc_type_validator.valid?(@identity_doc_type)
      return false if !@identity_doc_id.nil? && @identity_doc_id.to_s.length > 20
      return false if !@identity_doc_id.nil? && @identity_doc_id !~ Regexp.new(/^[0-9a-zA-Z-]+$/)
      return false if !@shipping_corporation_name.nil? && @shipping_corporation_name.to_s.length > 60
      return false if !@shipping_phone.nil? && @shipping_phone.to_s.length > 13
      return false if !@shipping_phone.nil? && @shipping_phone !~ Regexp.new(/^[0-9-]+$/)
      return false if !@shipping_email.nil? && @shipping_email.to_s.length > 254
      shipping_method_validator = EnumAttributeValidator.new('String', ["NEXT_DAY_OVERNIGHT", "TWO_DAY_SERVICE", "THREE_DAY_SERVICE", "LOWEST_COST", "CARRIER_DESIGNATED_BY_CUSTOMER", "ELECTRONIC_DELIVERY", "GROUND", "INTERNATIONAL", "MILITARY", "STORE_PICKUP", "SAME_DAY_SERVICE", "OTHER", "PUDO", "EXPEDITED"])
      return false unless shipping_method_validator.valid?(@shipping_method)
      return false if !@shipping_amount.nil? && @shipping_amount.to_s.length > 15
      return false if !@shipping_amount.nil? && @shipping_amount !~ Regexp.new(/^[0-9]+$/)
      return false if !@shipping_tracking_number.nil? && @shipping_tracking_number.to_s.length > 19
      return false if !@shipping_tracking_number.nil? && @shipping_tracking_number !~ Regexp.new(/^[0-9a-zA-Z-]+$/)
      return false if !@shipping_comment.nil? && @shipping_comment.to_s.length > 160
      return false if !@shipping_salutation.nil? && @shipping_salutation.to_s.length > 5
      return false if !@shipping_salutation.nil? && @shipping_salutation !~ Regexp.new(/^[ -~｡-ﾟ]+$/)
      return false if !@device_information.nil? && @device_information.to_s.length > 65535
      return false if !@device_information.nil? && @device_information !~ Regexp.new(/^[ -~]+$/)
      return false if !@user_registration_elapsed_days.nil? && @user_registration_elapsed_days.to_s.length > 7
      return false if !@user_registration_elapsed_days.nil? && @user_registration_elapsed_days !~ Regexp.new(/^[0-9]+$/)
      return false if !@promotion_code.nil? && @promotion_code.to_s.length > 36
      return false if !@promotion_code.nil? && @promotion_code !~ Regexp.new(/^[0-9a-zA-Z-]+$/)
      return false if !@gift_card_message.nil? && @gift_card_message.to_s.length > 160
      gift_card_type_validator = EnumAttributeValidator.new('String', ["ANNIVERSARY", "APRIL_FOOLS_DAY", "BABY_SHOWER", "BIRTHDAY", "BOSSES_DAY", "CELEBRATE_FALL", "CHINESE_NEW_YEAR", "CHRISTMAS", "CONGRATULATIONS", "EASTER", "FATHERS_DAY", "GRADUATION", "GRANDPARENTS_DAY", "HALLOWEEN", "HANUKKAH", "HOLIDAY", "INDEPENDENCE_DAY", "KWANZAA", "MOTHERS_DAY", "NEW_YEARS_DAY", "OTHER", "PASSOVER", "SEASONS_GREETINGS", "SECRETARYS_DAY", "ST_PATRICKS_DAY", "SWEETEST_DAY", "THANKSGIVING", "VALENTINES_DAY", "WEDDING"])
      return false unless gift_card_type_validator.valid?(@gift_card_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if user_id.nil?
        fail ArgumentError, 'user_id cannot be nil'
      end

      if user_id.to_s.length > 60
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 60.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9@_ . -]+$/)
      if user_id !~ pattern
        fail ArgumentError, "invalid value for \"user_id\", must conform to the pattern #{pattern}."
      end

      @user_id = user_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity_doc_type Object to be assigned
    def identity_doc_type=(identity_doc_type)
      validator = EnumAttributeValidator.new('String', ["PASSPORT", "TAXSTATEMENT"])
      unless validator.valid?(identity_doc_type)
        fail ArgumentError, "invalid value for \"identity_doc_type\", must be one of #{validator.allowable_values}."
      end
      @identity_doc_type = identity_doc_type
    end

    # Custom attribute writer method with validation
    # @param [Object] identity_doc_id Value to be assigned
    def identity_doc_id=(identity_doc_id)
      if identity_doc_id.nil?
        fail ArgumentError, 'identity_doc_id cannot be nil'
      end

      if identity_doc_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "identity_doc_id", the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z-]+$/)
      if identity_doc_id !~ pattern
        fail ArgumentError, "invalid value for \"identity_doc_id\", must conform to the pattern #{pattern}."
      end

      @identity_doc_id = identity_doc_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_corporation_name Value to be assigned
    def shipping_corporation_name=(shipping_corporation_name)
      if shipping_corporation_name.nil?
        fail ArgumentError, 'shipping_corporation_name cannot be nil'
      end

      if shipping_corporation_name.to_s.length > 60
        fail ArgumentError, 'invalid value for "shipping_corporation_name", the character length must be smaller than or equal to 60.'
      end

      @shipping_corporation_name = shipping_corporation_name
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_phone Value to be assigned
    def shipping_phone=(shipping_phone)
      if shipping_phone.nil?
        fail ArgumentError, 'shipping_phone cannot be nil'
      end

      if shipping_phone.to_s.length > 13
        fail ArgumentError, 'invalid value for "shipping_phone", the character length must be smaller than or equal to 13.'
      end

      pattern = Regexp.new(/^[0-9-]+$/)
      if shipping_phone !~ pattern
        fail ArgumentError, "invalid value for \"shipping_phone\", must conform to the pattern #{pattern}."
      end

      @shipping_phone = shipping_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_email Value to be assigned
    def shipping_email=(shipping_email)
      if shipping_email.nil?
        fail ArgumentError, 'shipping_email cannot be nil'
      end

      if shipping_email.to_s.length > 254
        fail ArgumentError, 'invalid value for "shipping_email", the character length must be smaller than or equal to 254.'
      end

      @shipping_email = shipping_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_method Object to be assigned
    def shipping_method=(shipping_method)
      validator = EnumAttributeValidator.new('String', ["NEXT_DAY_OVERNIGHT", "TWO_DAY_SERVICE", "THREE_DAY_SERVICE", "LOWEST_COST", "CARRIER_DESIGNATED_BY_CUSTOMER", "ELECTRONIC_DELIVERY", "GROUND", "INTERNATIONAL", "MILITARY", "STORE_PICKUP", "SAME_DAY_SERVICE", "OTHER", "PUDO", "EXPEDITED"])
      unless validator.valid?(shipping_method)
        fail ArgumentError, "invalid value for \"shipping_method\", must be one of #{validator.allowable_values}."
      end
      @shipping_method = shipping_method
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_amount Value to be assigned
    def shipping_amount=(shipping_amount)
      if shipping_amount.nil?
        fail ArgumentError, 'shipping_amount cannot be nil'
      end

      if shipping_amount.to_s.length > 15
        fail ArgumentError, 'invalid value for "shipping_amount", the character length must be smaller than or equal to 15.'
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if shipping_amount !~ pattern
        fail ArgumentError, "invalid value for \"shipping_amount\", must conform to the pattern #{pattern}."
      end

      @shipping_amount = shipping_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_tracking_number Value to be assigned
    def shipping_tracking_number=(shipping_tracking_number)
      if shipping_tracking_number.nil?
        fail ArgumentError, 'shipping_tracking_number cannot be nil'
      end

      if shipping_tracking_number.to_s.length > 19
        fail ArgumentError, 'invalid value for "shipping_tracking_number", the character length must be smaller than or equal to 19.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z-]+$/)
      if shipping_tracking_number !~ pattern
        fail ArgumentError, "invalid value for \"shipping_tracking_number\", must conform to the pattern #{pattern}."
      end

      @shipping_tracking_number = shipping_tracking_number
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_comment Value to be assigned
    def shipping_comment=(shipping_comment)
      if shipping_comment.nil?
        fail ArgumentError, 'shipping_comment cannot be nil'
      end

      if shipping_comment.to_s.length > 160
        fail ArgumentError, 'invalid value for "shipping_comment", the character length must be smaller than or equal to 160.'
      end

      @shipping_comment = shipping_comment
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_salutation Value to be assigned
    def shipping_salutation=(shipping_salutation)
      if shipping_salutation.nil?
        fail ArgumentError, 'shipping_salutation cannot be nil'
      end

      if shipping_salutation.to_s.length > 5
        fail ArgumentError, 'invalid value for "shipping_salutation", the character length must be smaller than or equal to 5.'
      end

      pattern = Regexp.new(/^[ -~｡-ﾟ]+$/)
      if shipping_salutation !~ pattern
        fail ArgumentError, "invalid value for \"shipping_salutation\", must conform to the pattern #{pattern}."
      end

      @shipping_salutation = shipping_salutation
    end

    # Custom attribute writer method with validation
    # @param [Object] device_information Value to be assigned
    def device_information=(device_information)
      if device_information.nil?
        fail ArgumentError, 'device_information cannot be nil'
      end

      if device_information.to_s.length > 65535
        fail ArgumentError, 'invalid value for "device_information", the character length must be smaller than or equal to 65535.'
      end

      pattern = Regexp.new(/^[ -~]+$/)
      if device_information !~ pattern
        fail ArgumentError, "invalid value for \"device_information\", must conform to the pattern #{pattern}."
      end

      @device_information = device_information
    end

    # Custom attribute writer method with validation
    # @param [Object] user_registration_elapsed_days Value to be assigned
    def user_registration_elapsed_days=(user_registration_elapsed_days)
      if user_registration_elapsed_days.nil?
        fail ArgumentError, 'user_registration_elapsed_days cannot be nil'
      end

      if user_registration_elapsed_days.to_s.length > 7
        fail ArgumentError, 'invalid value for "user_registration_elapsed_days", the character length must be smaller than or equal to 7.'
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if user_registration_elapsed_days !~ pattern
        fail ArgumentError, "invalid value for \"user_registration_elapsed_days\", must conform to the pattern #{pattern}."
      end

      @user_registration_elapsed_days = user_registration_elapsed_days
    end

    # Custom attribute writer method with validation
    # @param [Object] promotion_code Value to be assigned
    def promotion_code=(promotion_code)
      if promotion_code.nil?
        fail ArgumentError, 'promotion_code cannot be nil'
      end

      if promotion_code.to_s.length > 36
        fail ArgumentError, 'invalid value for "promotion_code", the character length must be smaller than or equal to 36.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z-]+$/)
      if promotion_code !~ pattern
        fail ArgumentError, "invalid value for \"promotion_code\", must conform to the pattern #{pattern}."
      end

      @promotion_code = promotion_code
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_card_message Value to be assigned
    def gift_card_message=(gift_card_message)
      if gift_card_message.nil?
        fail ArgumentError, 'gift_card_message cannot be nil'
      end

      if gift_card_message.to_s.length > 160
        fail ArgumentError, 'invalid value for "gift_card_message", the character length must be smaller than or equal to 160.'
      end

      @gift_card_message = gift_card_message
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gift_card_type Object to be assigned
    def gift_card_type=(gift_card_type)
      validator = EnumAttributeValidator.new('String', ["ANNIVERSARY", "APRIL_FOOLS_DAY", "BABY_SHOWER", "BIRTHDAY", "BOSSES_DAY", "CELEBRATE_FALL", "CHINESE_NEW_YEAR", "CHRISTMAS", "CONGRATULATIONS", "EASTER", "FATHERS_DAY", "GRADUATION", "GRANDPARENTS_DAY", "HALLOWEEN", "HANUKKAH", "HOLIDAY", "INDEPENDENCE_DAY", "KWANZAA", "MOTHERS_DAY", "NEW_YEARS_DAY", "OTHER", "PASSOVER", "SEASONS_GREETINGS", "SECRETARYS_DAY", "ST_PATRICKS_DAY", "SWEETEST_DAY", "THANKSGIVING", "VALENTINES_DAY", "WEDDING"])
      unless validator.valid?(gift_card_type)
        fail ArgumentError, "invalid value for \"gift_card_type\", must be one of #{validator.allowable_values}."
      end
      @gift_card_type = gift_card_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          identity_doc_type == o.identity_doc_type &&
          identity_doc_id == o.identity_doc_id &&
          shipping_corporation_name == o.shipping_corporation_name &&
          shipping_phone == o.shipping_phone &&
          shipping_email == o.shipping_email &&
          shipping_method == o.shipping_method &&
          shipping_amount == o.shipping_amount &&
          shipping_tracking_number == o.shipping_tracking_number &&
          shipping_comment == o.shipping_comment &&
          shipping_salutation == o.shipping_salutation &&
          device_information == o.device_information &&
          repeater == o.repeater &&
          user_registration_elapsed_days == o.user_registration_elapsed_days &&
          promotion_code == o.promotion_code &&
          gift_card_message == o.gift_card_message &&
          gift_card_type == o.gift_card_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_id, identity_doc_type, identity_doc_id, shipping_corporation_name, shipping_phone, shipping_email, shipping_method, shipping_amount, shipping_tracking_number, shipping_comment, shipping_salutation, device_information, repeater, user_registration_elapsed_days, promotion_code, gift_card_message, gift_card_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
