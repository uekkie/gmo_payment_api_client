=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module GmoPaymentApiClient
  class CreditcardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 都度支払い
    # カード情報を都度設定して支払う場合に呼び出すAPIです。   Apple Pay、Google Payでのお支払いもこのAPIを利用します。   <span style=\"color: #d41f1c\">※ApplePayでは3Dセキュアおよび不正検知のご利用ができません。</span> <br> 
    # @param credit_charge_request [CreditChargeRequest] カード情報の設定方法は以下のいずれかです。   1. トークン化して設定         - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。              - Apple Payトークン         Apple Payに対応した端末で取得したApple PayのPayment tokenをbase64エンコードした値です。         詳細は「BT01_ApplePay開発ガイド」を参照ください。              - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    2. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。      3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。     - カード会員の名前       - トークン化して設定         MPクレカトークンの「カード名義人」が利用されます。     - 直接設定         &#x60;creditInformation.card.cardholderName&#x60;が利用されます。     - カード会員のメールアドレスまたは電話番号       &#x60;payer&#x60;に設定した値が利用されます。       詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [CreditChargeResponse]
    def credit_charge(credit_charge_request, opts = {})
      data, _status_code, _headers = credit_charge_with_http_info(credit_charge_request, opts)
      data
    end

    # 都度支払い
    # カード情報を都度設定して支払う場合に呼び出すAPIです。   Apple Pay、Google Payでのお支払いもこのAPIを利用します。   &lt;span style&#x3D;\&quot;color: #d41f1c\&quot;&gt;※ApplePayでは3Dセキュアおよび不正検知のご利用ができません。&lt;/span&gt; &lt;br&gt; 
    # @param credit_charge_request [CreditChargeRequest] カード情報の設定方法は以下のいずれかです。   1. トークン化して設定         - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。              - Apple Payトークン         Apple Payに対応した端末で取得したApple PayのPayment tokenをbase64エンコードした値です。         詳細は「BT01_ApplePay開発ガイド」を参照ください。              - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    2. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。      3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。     - カード会員の名前       - トークン化して設定         MPクレカトークンの「カード名義人」が利用されます。     - 直接設定         &#x60;creditInformation.card.cardholderName&#x60;が利用されます。     - カード会員のメールアドレスまたは電話番号       &#x60;payer&#x60;に設定した値が利用されます。       詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(CreditChargeResponse, Integer, Hash)>] CreditChargeResponse data, response status code and response headers
    def credit_charge_with_http_info(credit_charge_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreditcardApi.credit_charge ...'
      end
      # verify the required parameter 'credit_charge_request' is set
      if @api_client.config.client_side_validation && credit_charge_request.nil?
        fail ArgumentError, "Missing the required parameter 'credit_charge_request' when calling CreditcardApi.credit_charge"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling CreditcardApi.credit_charge, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/credit/charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(credit_charge_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreditChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"CreditcardApi.credit_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreditcardApi#credit_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード詳細情報取得
    # カードの詳細情報を返すためのAPIです。   「クレカトークン」または「会員ID＋カードID」から紐づいたカード情報を取得します。   利用可能な決済手段はクレジットカードのみです。   ※本APIを利用するには契約が必要です。 
    # @param credit_get_card_details_request [CreditGetCardDetailsRequest] カード情報の設定方法は以下のいずれかです。   1. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         本APIではトークンを利用しても無効化されず、支払いAPIで同じMPクレカトークンを設定できます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。  2. 登録済み情報を設定   登録されているカード情報を利用します。   対象の会員IDが必要です。 
    # @param [Hash] opts the optional parameters
    # @return [CreditGetCardDetailsResponse]
    def credit_get_card_details(credit_get_card_details_request, opts = {})
      data, _status_code, _headers = credit_get_card_details_with_http_info(credit_get_card_details_request, opts)
      data
    end

    # カード詳細情報取得
    # カードの詳細情報を返すためのAPIです。   「クレカトークン」または「会員ID＋カードID」から紐づいたカード情報を取得します。   利用可能な決済手段はクレジットカードのみです。   ※本APIを利用するには契約が必要です。 
    # @param credit_get_card_details_request [CreditGetCardDetailsRequest] カード情報の設定方法は以下のいずれかです。   1. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         本APIではトークンを利用しても無効化されず、支払いAPIで同じMPクレカトークンを設定できます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。  2. 登録済み情報を設定   登録されているカード情報を利用します。   対象の会員IDが必要です。 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreditGetCardDetailsResponse, Integer, Hash)>] CreditGetCardDetailsResponse data, response status code and response headers
    def credit_get_card_details_with_http_info(credit_get_card_details_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreditcardApi.credit_get_card_details ...'
      end
      # verify the required parameter 'credit_get_card_details_request' is set
      if @api_client.config.client_side_validation && credit_get_card_details_request.nil?
        fail ArgumentError, "Missing the required parameter 'credit_get_card_details_request' when calling CreditcardApi.credit_get_card_details"
      end
      # resource path
      local_var_path = '/credit/getCardDetails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(credit_get_card_details_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreditGetCardDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"CreditcardApi.credit_get_card_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreditcardApi#credit_get_card_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 随時支払い
    # 登録されているカード情報を使って支払う場合に呼び出すAPIです。   対応している決済手段はクレジットカード、Apple Payです。   ただしVISAブランドのカード番号が登録されたApple Payはご利用になれません。   また、VISA以外のブランドについても、将来的に利用できなくなる可能性があります。   <span style=\"color: #d41f1c\">※ApplePayでは3Dセキュアおよび不正検知のご利用ができません。</span>   Google Payについては、アカウント情報を当サービスに保管できません。   都度支払い時にGoogle Payで使用されたクレジットカード情報を保管することで、通常のクレジットカードとして随時支払いが利用可能です。 
    # @param credit_onfile_charge_request [CreditOnfileChargeRequest] カードのタイプは&#x60;creditOnfileInformation.onfileCard.type&#x60;で設定します。   プロトコルタイプとは異なりカード登録連番を物理モードで設定できません。      3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。   - カード会員の名前     登録されているカード情報の「カード名義人」が利用されます。     カードの登録については、[有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)、[カード登録(/credit/storeCard)](#tag/creditcard/operation/creditStoreCard)を参照ください。 - カード会員のメールアドレスまたは電話番号     &#x60;payer&#x60;に設定した値が利用されます。     詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [CreditChargeResponse]
    def credit_onfile_charge(credit_onfile_charge_request, opts = {})
      data, _status_code, _headers = credit_onfile_charge_with_http_info(credit_onfile_charge_request, opts)
      data
    end

    # 随時支払い
    # 登録されているカード情報を使って支払う場合に呼び出すAPIです。   対応している決済手段はクレジットカード、Apple Payです。   ただしVISAブランドのカード番号が登録されたApple Payはご利用になれません。   また、VISA以外のブランドについても、将来的に利用できなくなる可能性があります。   &lt;span style&#x3D;\&quot;color: #d41f1c\&quot;&gt;※ApplePayでは3Dセキュアおよび不正検知のご利用ができません。&lt;/span&gt;   Google Payについては、アカウント情報を当サービスに保管できません。   都度支払い時にGoogle Payで使用されたクレジットカード情報を保管することで、通常のクレジットカードとして随時支払いが利用可能です。 
    # @param credit_onfile_charge_request [CreditOnfileChargeRequest] カードのタイプは&#x60;creditOnfileInformation.onfileCard.type&#x60;で設定します。   プロトコルタイプとは異なりカード登録連番を物理モードで設定できません。      3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。   - カード会員の名前     登録されているカード情報の「カード名義人」が利用されます。     カードの登録については、[有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)、[カード登録(/credit/storeCard)](#tag/creditcard/operation/creditStoreCard)を参照ください。 - カード会員のメールアドレスまたは電話番号     &#x60;payer&#x60;に設定した値が利用されます。     詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(CreditChargeResponse, Integer, Hash)>] CreditChargeResponse data, response status code and response headers
    def credit_onfile_charge_with_http_info(credit_onfile_charge_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreditcardApi.credit_onfile_charge ...'
      end
      # verify the required parameter 'credit_onfile_charge_request' is set
      if @api_client.config.client_side_validation && credit_onfile_charge_request.nil?
        fail ArgumentError, "Missing the required parameter 'credit_onfile_charge_request' when calling CreditcardApi.credit_onfile_charge"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling CreditcardApi.credit_onfile_charge, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/credit/on-file/charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(credit_onfile_charge_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreditChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"CreditcardApi.credit_onfile_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreditcardApi#credit_onfile_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # カード登録
    # カード情報を会員に紐づけて登録するためのAPIです。   [有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)とは異なり、**カード情報の有効性確認をしません**。   このため、トークンまたは直接設定で登録したカード情報については、随時支払いに失敗する可能があります。   利用可能な決済手段はクレジットカード、Google Payであり、**Apple Payは利用できません**。   ただし、Google Payの場合は、通常のクレジットカードとして会員に紐づけて登録します。   <br> 継続課金サービスや一括決済サービスで登録したカード情報を利用する場合は、以下にご注意ください。   トークンまたは直接設定で登録したカード情報は、有効性確認がされていないため、チャージバックやカード会社契約停止のリスクがあります。   必ず[有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)を使用してカード情報を登録してください。   成功した取引情報を使って登録したカード情報は問題ありせん。 
    # @param credit_store_card_request [CreditStoreCardRequest] カード情報の設定方法は以下のいずれかです。   1. 成功した取引を設定   成功した支払いや有効性確認時に返された取引ID&#x60;accessId&#x60;を設定することで、該当の取引で利用されたカード情報を登録します。    2. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。        - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    3. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。      登録したカード情報で3Dセキュア認証をする場合、「カード名義人」を含めて登録する必要があります。   - 成功した取引を設定     該当の取引で設定した「カード名義人」が登録されます。   - トークン化して設定     MPクレカトークンの「カード名義人」が登録されます。 - 直接設定     &#x60;creditStoringInformation.card.cardholderName&#x60;が登録されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [CreditStoreCardReponse]
    def credit_store_card(credit_store_card_request, opts = {})
      data, _status_code, _headers = credit_store_card_with_http_info(credit_store_card_request, opts)
      data
    end

    # カード登録
    # カード情報を会員に紐づけて登録するためのAPIです。   [有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)とは異なり、**カード情報の有効性確認をしません**。   このため、トークンまたは直接設定で登録したカード情報については、随時支払いに失敗する可能があります。   利用可能な決済手段はクレジットカード、Google Payであり、**Apple Payは利用できません**。   ただし、Google Payの場合は、通常のクレジットカードとして会員に紐づけて登録します。   &lt;br&gt; 継続課金サービスや一括決済サービスで登録したカード情報を利用する場合は、以下にご注意ください。   トークンまたは直接設定で登録したカード情報は、有効性確認がされていないため、チャージバックやカード会社契約停止のリスクがあります。   必ず[有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)を使用してカード情報を登録してください。   成功した取引情報を使って登録したカード情報は問題ありせん。 
    # @param credit_store_card_request [CreditStoreCardRequest] カード情報の設定方法は以下のいずれかです。   1. 成功した取引を設定   成功した支払いや有効性確認時に返された取引ID&#x60;accessId&#x60;を設定することで、該当の取引で利用されたカード情報を登録します。    2. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。        - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    3. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。      登録したカード情報で3Dセキュア認証をする場合、「カード名義人」を含めて登録する必要があります。   - 成功した取引を設定     該当の取引で設定した「カード名義人」が登録されます。   - トークン化して設定     MPクレカトークンの「カード名義人」が登録されます。 - 直接設定     &#x60;creditStoringInformation.card.cardholderName&#x60;が登録されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(CreditStoreCardReponse, Integer, Hash)>] CreditStoreCardReponse data, response status code and response headers
    def credit_store_card_with_http_info(credit_store_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreditcardApi.credit_store_card ...'
      end
      # verify the required parameter 'credit_store_card_request' is set
      if @api_client.config.client_side_validation && credit_store_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'credit_store_card_request' when calling CreditcardApi.credit_store_card"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling CreditcardApi.credit_store_card, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/credit/storeCard'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(credit_store_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreditStoreCardReponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"CreditcardApi.credit_store_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreditcardApi#credit_store_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 有効性確認
    # カード情報の有効性確認をするためのAPIです。     加えて有効性の確認が取れたカード情報を会員に紐づけて登録できます。   利用可能な決済手段はクレジットカード、Google Payであり、**Apple Payは利用できません。**   Google Payは通常のクレジットカードとして会員に紐づけて登録します。 
    # @param credit_verify_card_request [CreditVerifyCardRequest] カード情報の設定方法は以下のいずれかです。   1. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。        - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    2. 登録済み情報を設定   登録されているカード情報を利用します。   対象の会員IDが必要です。    3. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。    3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。     - カード会員の名前       - トークン化して設定         MPクレカトークンの「カード名義人」が利用されます。     - 登録済み情報を設定         登録されているカード情報の「カード名義人」が利用されます。     - 直接設定         &#x60;creditVerificationInformation.card.cardholderName&#x60;が利用されます。   - カード会員のメールアドレスまたは電話番号       &#x60;payer&#x60;に設定した値が利用されます。詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。      有効性確認後にカード情報を会員に紐づけて登録した場合、設定した「カード名義人」が登録されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [CreditVerifyCardResponse]
    def credit_verify_card(credit_verify_card_request, opts = {})
      data, _status_code, _headers = credit_verify_card_with_http_info(credit_verify_card_request, opts)
      data
    end

    # 有効性確認
    # カード情報の有効性確認をするためのAPIです。     加えて有効性の確認が取れたカード情報を会員に紐づけて登録できます。   利用可能な決済手段はクレジットカード、Google Payであり、**Apple Payは利用できません。**   Google Payは通常のクレジットカードとして会員に紐づけて登録します。 
    # @param credit_verify_card_request [CreditVerifyCardRequest] カード情報の設定方法は以下のいずれかです。   1. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。        - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    2. 登録済み情報を設定   登録されているカード情報を利用します。   対象の会員IDが必要です。    3. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。    3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。     - カード会員の名前       - トークン化して設定         MPクレカトークンの「カード名義人」が利用されます。     - 登録済み情報を設定         登録されているカード情報の「カード名義人」が利用されます。     - 直接設定         &#x60;creditVerificationInformation.card.cardholderName&#x60;が利用されます。   - カード会員のメールアドレスまたは電話番号       &#x60;payer&#x60;に設定した値が利用されます。詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。      有効性確認後にカード情報を会員に紐づけて登録した場合、設定した「カード名義人」が登録されます。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(CreditVerifyCardResponse, Integer, Hash)>] CreditVerifyCardResponse data, response status code and response headers
    def credit_verify_card_with_http_info(credit_verify_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreditcardApi.credit_verify_card ...'
      end
      # verify the required parameter 'credit_verify_card_request' is set
      if @api_client.config.client_side_validation && credit_verify_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'credit_verify_card_request' when calling CreditcardApi.credit_verify_card"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling CreditcardApi.credit_verify_card, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/credit/verifyCard'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(credit_verify_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreditVerifyCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"CreditcardApi.credit_verify_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreditcardApi#credit_verify_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 3Dセキュア後の支払い
    # 3Dセキュアに進んだ後に最終的に支払いをするためのAPIです。   Chargeリクエスト時に自動オーソリなしの場合には、コールバック後にこのAPIで支払いを完了してください。 
    # @param tds2_finalize_charge_request [Tds2FinalizeChargeRequest] 対象の取引のID 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Tds2FinalizeChargeResponse]
    def tds2_finalize_charge(tds2_finalize_charge_request, opts = {})
      data, _status_code, _headers = tds2_finalize_charge_with_http_info(tds2_finalize_charge_request, opts)
      data
    end

    # 3Dセキュア後の支払い
    # 3Dセキュアに進んだ後に最終的に支払いをするためのAPIです。   Chargeリクエスト時に自動オーソリなしの場合には、コールバック後にこのAPIで支払いを完了してください。 
    # @param tds2_finalize_charge_request [Tds2FinalizeChargeRequest] 対象の取引のID 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(Tds2FinalizeChargeResponse, Integer, Hash)>] Tds2FinalizeChargeResponse data, response status code and response headers
    def tds2_finalize_charge_with_http_info(tds2_finalize_charge_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreditcardApi.tds2_finalize_charge ...'
      end
      # verify the required parameter 'tds2_finalize_charge_request' is set
      if @api_client.config.client_side_validation && tds2_finalize_charge_request.nil?
        fail ArgumentError, "Missing the required parameter 'tds2_finalize_charge_request' when calling CreditcardApi.tds2_finalize_charge"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling CreditcardApi.tds2_finalize_charge, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/tds2/finalizeCharge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tds2_finalize_charge_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Tds2FinalizeChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"CreditcardApi.tds2_finalize_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreditcardApi#tds2_finalize_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 3Dセキュア後の有効性確認
    # 3Dセキュア認証に進んだ後に最終的に有効性確認とカード登録をするためのAPIです。   有効性リクエスト時に自動オーソリなしの場合には、コールバック後にこのAPIで処理を完了してください。 
    # @param tds2_finalize_verification_request [Tds2FinalizeVerificationRequest] 対象の取引のID 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Tds2FinalizeVerificationResponse]
    def tds2_finalize_verification(tds2_finalize_verification_request, opts = {})
      data, _status_code, _headers = tds2_finalize_verification_with_http_info(tds2_finalize_verification_request, opts)
      data
    end

    # 3Dセキュア後の有効性確認
    # 3Dセキュア認証に進んだ後に最終的に有効性確認とカード登録をするためのAPIです。   有効性リクエスト時に自動オーソリなしの場合には、コールバック後にこのAPIで処理を完了してください。 
    # @param tds2_finalize_verification_request [Tds2FinalizeVerificationRequest] 対象の取引のID 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(Tds2FinalizeVerificationResponse, Integer, Hash)>] Tds2FinalizeVerificationResponse data, response status code and response headers
    def tds2_finalize_verification_with_http_info(tds2_finalize_verification_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CreditcardApi.tds2_finalize_verification ...'
      end
      # verify the required parameter 'tds2_finalize_verification_request' is set
      if @api_client.config.client_side_validation && tds2_finalize_verification_request.nil?
        fail ArgumentError, "Missing the required parameter 'tds2_finalize_verification_request' when calling CreditcardApi.tds2_finalize_verification"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling CreditcardApi.tds2_finalize_verification, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/tds2/finalizeVerification'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tds2_finalize_verification_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Tds2FinalizeVerificationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"CreditcardApi.tds2_finalize_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CreditcardApi#tds2_finalize_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
