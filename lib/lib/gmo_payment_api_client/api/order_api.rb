=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module GmoPaymentApiClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # キャンセル
    # 支払いを取り消すためのAPIです。 
    # @param order_cancel_request [OrderCancelRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [OrderCancel201Response]
    def order_cancel(order_cancel_request, opts = {})
      data, _status_code, _headers = order_cancel_with_http_info(order_cancel_request, opts)
      data
    end

    # キャンセル
    # 支払いを取り消すためのAPIです。 
    # @param order_cancel_request [OrderCancelRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(OrderCancel201Response, Integer, Hash)>] OrderCancel201Response data, response status code and response headers
    def order_cancel_with_http_info(order_cancel_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_cancel ...'
      end
      # verify the required parameter 'order_cancel_request' is set
      if @api_client.config.client_side_validation && order_cancel_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_cancel_request' when calling OrderApi.order_cancel"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling OrderApi.order_cancel, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/order/cancel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_cancel_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderCancel201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"OrderApi.order_cancel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 確定
    # 決済確定のためのAPIです。 
    # @param order_capture_request [OrderCaptureRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [OrderCapture201Response]
    def order_capture(order_capture_request, opts = {})
      data, _status_code, _headers = order_capture_with_http_info(order_capture_request, opts)
      data
    end

    # 確定
    # 決済確定のためのAPIです。 
    # @param order_capture_request [OrderCaptureRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(OrderCapture201Response, Integer, Hash)>] OrderCapture201Response data, response status code and response headers
    def order_capture_with_http_info(order_capture_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_capture ...'
      end
      # verify the required parameter 'order_capture_request' is set
      if @api_client.config.client_side_validation && order_capture_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_capture_request' when calling OrderApi.order_capture"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling OrderApi.order_capture, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/order/capture'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_capture_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderCapture201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"OrderApi.order_capture",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_capture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 照会
    # 取引を照会するためのAPIです。   accessIdとorderIdのどちらかは必ず設定してください。   accessIdとorderIdの両方を設定した場合は両方に一致する取引情報を返却します。 
    # @param order_inquiry_request [OrderInquiryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrderInquiryResponse]
    def order_inquiry(order_inquiry_request, opts = {})
      data, _status_code, _headers = order_inquiry_with_http_info(order_inquiry_request, opts)
      data
    end

    # 照会
    # 取引を照会するためのAPIです。   accessIdとorderIdのどちらかは必ず設定してください。   accessIdとorderIdの両方を設定した場合は両方に一致する取引情報を返却します。 
    # @param order_inquiry_request [OrderInquiryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderInquiryResponse, Integer, Hash)>] OrderInquiryResponse data, response status code and response headers
    def order_inquiry_with_http_info(order_inquiry_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_inquiry ...'
      end
      # verify the required parameter 'order_inquiry_request' is set
      if @api_client.config.client_side_validation && order_inquiry_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_inquiry_request' when calling OrderApi.order_inquiry"
      end
      # resource path
      local_var_path = '/order/inquiry'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_inquiry_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderInquiryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"OrderApi.order_inquiry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 金額変更
    # すでに支払い済みの取引の金額を変更します。   決済手段と支払い状態により実行できる処理が異なります。   クレジットカードの場合は、当サービス内部で取消と再オーソリ(信用照会)の処理を実施します。   お客様の信用状態によっては、再オーソリ(信用照会)が失敗する場合があり、その場合は取消は無効となり金額変更APIを呼び出す前の状態に戻ります。   クレジットカードは同じ金額を設定して呼び出すことで、仮売上状態の延長が可能です。  |||仮売上<br>の減額|仮売上<br>の増額|実売上<br>の減額|実売上<br>の増額|即時売上<br>の減額|即時売上<br>の増額| |:-------|:------------|:-:|:-:|:-:|:-:|:-:|:-:| |クレカ払い|クレカ     | 〇 | 〇 | 〇 | 〇 | 〇 | 〇 | |         |Google Pay | 〇 | 〇 | 〇 | 〇 | 〇 | 〇 | |         |Apple Pay  | △<sup>*1</sup> | △<sup>*1</sup> | △<sup>*1</sup> | △<sup>*1</sup> | △<sup>*1</sup> | △<sup>*1</sup> | |Pay払い  |PayPay     | × | × | 〇 | × | 〇 | × | |         |d払い      | × | × | 〇 | △<sup>*2</sup> | 〇 | △<sup>*2</sup> | |         |楽天ペイ(オンライン決済)V2 | 〇 | 〇 | 〇 | 〇 | 〇 | 〇 | |         |Amazon Pay V2 | 〇 | 〇 | 〇 | × | 〇 | × | |         |au PAY(ネット支払い)アプリ方式  | 〇 | 〇 | 〇 | × | 〇 | × | |         |メルペイ    | × | × | 〇 | × | 〇 | × | |現金払い  |コンビニ   | - | - | - | - | - | - | |         |Pay-easy   | - | - | - | - | - | - | |         |銀行振込    | - | - | - | - | - | - |  *1：Visaブランドのカードは増額・減額ができません。   *2：減額した取引に限り、元取引金額までの決済金額の増額ができます。 
    # @param order_update_request [OrderUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [OrderUpdate201Response]
    def order_update(order_update_request, opts = {})
      data, _status_code, _headers = order_update_with_http_info(order_update_request, opts)
      data
    end

    # 金額変更
    # すでに支払い済みの取引の金額を変更します。   決済手段と支払い状態により実行できる処理が異なります。   クレジットカードの場合は、当サービス内部で取消と再オーソリ(信用照会)の処理を実施します。   お客様の信用状態によっては、再オーソリ(信用照会)が失敗する場合があり、その場合は取消は無効となり金額変更APIを呼び出す前の状態に戻ります。   クレジットカードは同じ金額を設定して呼び出すことで、仮売上状態の延長が可能です。  |||仮売上&lt;br&gt;の減額|仮売上&lt;br&gt;の増額|実売上&lt;br&gt;の減額|実売上&lt;br&gt;の増額|即時売上&lt;br&gt;の減額|即時売上&lt;br&gt;の増額| |:-------|:------------|:-:|:-:|:-:|:-:|:-:|:-:| |クレカ払い|クレカ     | 〇 | 〇 | 〇 | 〇 | 〇 | 〇 | |         |Google Pay | 〇 | 〇 | 〇 | 〇 | 〇 | 〇 | |         |Apple Pay  | △&lt;sup&gt;*1&lt;/sup&gt; | △&lt;sup&gt;*1&lt;/sup&gt; | △&lt;sup&gt;*1&lt;/sup&gt; | △&lt;sup&gt;*1&lt;/sup&gt; | △&lt;sup&gt;*1&lt;/sup&gt; | △&lt;sup&gt;*1&lt;/sup&gt; | |Pay払い  |PayPay     | × | × | 〇 | × | 〇 | × | |         |d払い      | × | × | 〇 | △&lt;sup&gt;*2&lt;/sup&gt; | 〇 | △&lt;sup&gt;*2&lt;/sup&gt; | |         |楽天ペイ(オンライン決済)V2 | 〇 | 〇 | 〇 | 〇 | 〇 | 〇 | |         |Amazon Pay V2 | 〇 | 〇 | 〇 | × | 〇 | × | |         |au PAY(ネット支払い)アプリ方式  | 〇 | 〇 | 〇 | × | 〇 | × | |         |メルペイ    | × | × | 〇 | × | 〇 | × | |現金払い  |コンビニ   | - | - | - | - | - | - | |         |Pay-easy   | - | - | - | - | - | - | |         |銀行振込    | - | - | - | - | - | - |  *1：Visaブランドのカードは増額・減額ができません。   *2：減額した取引に限り、元取引金額までの決済金額の増額ができます。 
    # @param order_update_request [OrderUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(OrderUpdate201Response, Integer, Hash)>] OrderUpdate201Response data, response status code and response headers
    def order_update_with_http_info(order_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_update ...'
      end
      # verify the required parameter 'order_update_request' is set
      if @api_client.config.client_side_validation && order_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_update_request' when calling OrderApi.order_update"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling OrderApi.order_update, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/order/update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderUpdate201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"OrderApi.order_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
