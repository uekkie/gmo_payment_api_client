=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module GmoPaymentApiClient
  class WalletApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 利用承諾
    # 随時決済のための利用承諾手続き時に呼び出すAPIです。 
    # @param wallet_authorization_request [WalletAuthorizationRequest] どのPay払いを利用するかは&#x60;walletInformation.walletType&#x60;で設定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [WalletAuthorizationResponse]
    def wallet_authorize_account(wallet_authorization_request, opts = {})
      data, _status_code, _headers = wallet_authorize_account_with_http_info(wallet_authorization_request, opts)
      data
    end

    # 利用承諾
    # 随時決済のための利用承諾手続き時に呼び出すAPIです。 
    # @param wallet_authorization_request [WalletAuthorizationRequest] どのPay払いを利用するかは&#x60;walletInformation.walletType&#x60;で設定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(WalletAuthorizationResponse, Integer, Hash)>] WalletAuthorizationResponse data, response status code and response headers
    def wallet_authorize_account_with_http_info(wallet_authorization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.wallet_authorize_account ...'
      end
      # verify the required parameter 'wallet_authorization_request' is set
      if @api_client.config.client_side_validation && wallet_authorization_request.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_authorization_request' when calling WalletApi.wallet_authorize_account"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling WalletApi.wallet_authorize_account, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/wallet/authorizeAccount'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wallet_authorization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WalletAuthorizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"WalletApi.wallet_authorize_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#wallet_authorize_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 都度支払い
    # 都度のお手続きをしてPay払いで支払う場合に呼び出すAPIです。 
    # @param wallet_charge_request [WalletChargeRequest] どのPay払いを利用するかは&#x60;walletInformation.walletType&#x60;で設定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [WalletChargeResponse]
    def wallet_charge(wallet_charge_request, opts = {})
      data, _status_code, _headers = wallet_charge_with_http_info(wallet_charge_request, opts)
      data
    end

    # 都度支払い
    # 都度のお手続きをしてPay払いで支払う場合に呼び出すAPIです。 
    # @param wallet_charge_request [WalletChargeRequest] どのPay払いを利用するかは&#x60;walletInformation.walletType&#x60;で設定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(WalletChargeResponse, Integer, Hash)>] WalletChargeResponse data, response status code and response headers
    def wallet_charge_with_http_info(wallet_charge_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.wallet_charge ...'
      end
      # verify the required parameter 'wallet_charge_request' is set
      if @api_client.config.client_side_validation && wallet_charge_request.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_charge_request' when calling WalletApi.wallet_charge"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling WalletApi.wallet_charge, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/wallet/charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wallet_charge_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WalletChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"WalletApi.wallet_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#wallet_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 購入者情報取得
    # 決済事業者で保持している購入者情報を取得するためのAPIです。   現時点ではAmazon Pay V2のみ利用可能です。 
    # @param wallet_get_customer_data_request [WalletGetCustomerDataRequest] 
    # @param [Hash] opts the optional parameters
    # @return [WalletGetCustomerDataResponse]
    def wallet_get_customer_data(wallet_get_customer_data_request, opts = {})
      data, _status_code, _headers = wallet_get_customer_data_with_http_info(wallet_get_customer_data_request, opts)
      data
    end

    # 購入者情報取得
    # 決済事業者で保持している購入者情報を取得するためのAPIです。   現時点ではAmazon Pay V2のみ利用可能です。 
    # @param wallet_get_customer_data_request [WalletGetCustomerDataRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletGetCustomerDataResponse, Integer, Hash)>] WalletGetCustomerDataResponse data, response status code and response headers
    def wallet_get_customer_data_with_http_info(wallet_get_customer_data_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.wallet_get_customer_data ...'
      end
      # verify the required parameter 'wallet_get_customer_data_request' is set
      if @api_client.config.client_side_validation && wallet_get_customer_data_request.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_get_customer_data_request' when calling WalletApi.wallet_get_customer_data"
      end
      # resource path
      local_var_path = '/wallet/getCustomerData'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wallet_get_customer_data_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WalletGetCustomerDataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"WalletApi.wallet_get_customer_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#wallet_get_customer_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 随時支払い
    # 事前に承認済の認証情報を使ってPay払いで支払う場合に呼び出すAPIです。 
    # @param wallet_onfile_charge_request [WalletOnfileChargeRequest] どのPay払いを利用するかは&#x60;walletOnfileInformation.onfileWallet&#x60;で設定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [WalletOnfileChargeResponse]
    def wallet_onfile_charge(wallet_onfile_charge_request, opts = {})
      data, _status_code, _headers = wallet_onfile_charge_with_http_info(wallet_onfile_charge_request, opts)
      data
    end

    # 随時支払い
    # 事前に承認済の認証情報を使ってPay払いで支払う場合に呼び出すAPIです。 
    # @param wallet_onfile_charge_request [WalletOnfileChargeRequest] どのPay払いを利用するかは&#x60;walletOnfileInformation.onfileWallet&#x60;で設定します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
    # @return [Array<(WalletOnfileChargeResponse, Integer, Hash)>] WalletOnfileChargeResponse data, response status code and response headers
    def wallet_onfile_charge_with_http_info(wallet_onfile_charge_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.wallet_onfile_charge ...'
      end
      # verify the required parameter 'wallet_onfile_charge_request' is set
      if @api_client.config.client_side_validation && wallet_onfile_charge_request.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_onfile_charge_request' when calling WalletApi.wallet_onfile_charge"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 36
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling WalletApi.wallet_onfile_charge, the character length must be smaller than or equal to 36.'
      end

      # resource path
      local_var_path = '/wallet/on-file/charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wallet_onfile_charge_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WalletOnfileChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'Password']

      new_options = opts.merge(
        :operation => :"WalletApi.wallet_onfile_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#wallet_onfile_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
