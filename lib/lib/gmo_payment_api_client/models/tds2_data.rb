=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # 3Dセキュアデータ情報
  class Tds2Data
    # カード会員情報の最終更新日   YYYYMMDD形式 
    attr_accessor :ch_acc_change

    # カード会員の作成日   YYYYMMDD形式 
    attr_accessor :ch_acc_date

    # カード会員のパスワード変更日   YYYYMMDD形式 
    attr_accessor :ch_acc_pw_change

    # 過去6ヶ月間にこのカード会員が購入した回数 
    attr_accessor :nb_purchase_account

    # カード登録日   カード会員にカード情報が登録された日付を設定します。   YYYYMMDD形式 
    attr_accessor :payment_acc_age

    # 過去24時間に行われたカード情報追加の試行回数 
    attr_accessor :provision_attempts_day

    # 配送先住所の初回使用日   取引で使用される配送先住所が加盟店様で最初に使用された日付を設定します。   YYYYMMDD形式 
    attr_accessor :ship_address_usage

    # カード会員名と配送先名の一致/不一致   カード会員の会員名と取引に使用される配送先名の一致/不一致を設定します。   - `01`: カード会員名と配送先名が一致   - `02`: カード会員名と配送先名が不一致 
    attr_accessor :ship_name_ind

    # カード会員の不審行為情報   カード会員で、不審な行動(過去の不正行為を含む)を加盟店様が発見したかどうかを設定します。   - `01`: 不審な行動は見られなかった   - `02`: 不審な行動が見られた 
    attr_accessor :suspicious_acc_activity

    # 過去24時間の取引回数   過去24時間に行われた、カード会員と加盟店様との取引の回数を設定します。 
    attr_accessor :txn_activity_day

    # 前年の取引回数   前年に行われた、カード会員と加盟店様との取引の回数を設定します。 
    attr_accessor :txn_activity_year

    # ログイン証跡   カード会員が特定の方法でログインしたことを裏付けるデータを設定します。   設定できる最大長はUTF-8で2048byteです。 
    attr_accessor :three_ds_req_auth_data

    # ログイン方法   カード会員の加盟店様システムへのログイン方法を設定します。   - `01`: 認証なし(ゲストとしてログイン)   - `02`: 加盟店様自身の認証情報   - `03`: SSO(シングルサインオン)   - `04`: イシュアーの認証情報   - `05`: サードパーティ認証   - `06`: FIDO認証 
    attr_accessor :three_ds_req_auth_method

    # ログイン日時   カード会員のログイン日時を設定します。   YYYYMMDDHHMM形式 
    attr_accessor :three_ds_req_auth_timestamp

    # 商品納品時間枠   - `01`: 電子デリバリー   - `02`: 当日出荷   - `03`: 翌日出荷   - `04`: 2日目以降の出荷 
    attr_accessor :delivery_timeframe

    # プリペイドカードまたはギフトカードを購入の場合、総購入金額の値を設定します。 
    attr_accessor :gift_card_amount

    # プリペイドカードまたはギフトカードを購入の場合、購入された総数を設定します。 
    attr_accessor :gift_card_count

    # 購入されたプリペイドカードまたはギフトカードの通貨コード   プリペイドカードまたはギフトカードを購入の場合、カードの通貨を表す、ISO 4217で定義されている通貨コードを設定します。   ※以下のコードは対象外です。   955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 999 
    attr_accessor :gift_card_curr

    # 商品の発売予定日   先行予約購入の場合は、商品の発売予定日を設定します。   YYYYMMDD形式 
    attr_accessor :pre_order_date

    # 商品の販売時期情報   先行予約購入か、発売済み商品の購入かを設定します。   - `01`: 発売済み商品   - `02`: 先行予約商品 
    attr_accessor :pre_order_purchase_ind

    # 商品の注文情報   カード会員が以前購入した商品を再び注文しているかどうかを設定します。   - `01`: 初回注文   - `02`: 再注文 
    attr_accessor :reorder_items_ind

    # 取引の配送方法   - `01`: カード会員の請求先住所に配送する   - `02`: 加盟店様が保持している別の、確認済み住所に配送する   - `03`: カード会員の請求先住所と異なる住所に配送する   - `04`: 店舗へ配送 / 近所の店舗での受け取り(店舗の住所は配送先住所で設定する)   - `05`: デジタル商品(オンラインサービス、電子ギフトカードおよび償還コードを含む)   - `06`: 配送なし(旅行およびイベントのチケット)   - `07`: その他(ゲーム、配送されないデジタルサービス、電子メディアの購読料など) 
    attr_accessor :ship_ind

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ch_acc_change' => :'chAccChange',
        :'ch_acc_date' => :'chAccDate',
        :'ch_acc_pw_change' => :'chAccPwChange',
        :'nb_purchase_account' => :'nbPurchaseAccount',
        :'payment_acc_age' => :'paymentAccAge',
        :'provision_attempts_day' => :'provisionAttemptsDay',
        :'ship_address_usage' => :'shipAddressUsage',
        :'ship_name_ind' => :'shipNameInd',
        :'suspicious_acc_activity' => :'suspiciousAccActivity',
        :'txn_activity_day' => :'txnActivityDay',
        :'txn_activity_year' => :'txnActivityYear',
        :'three_ds_req_auth_data' => :'threeDSReqAuthData',
        :'three_ds_req_auth_method' => :'threeDSReqAuthMethod',
        :'three_ds_req_auth_timestamp' => :'threeDSReqAuthTimestamp',
        :'delivery_timeframe' => :'deliveryTimeframe',
        :'gift_card_amount' => :'giftCardAmount',
        :'gift_card_count' => :'giftCardCount',
        :'gift_card_curr' => :'giftCardCurr',
        :'pre_order_date' => :'preOrderDate',
        :'pre_order_purchase_ind' => :'preOrderPurchaseInd',
        :'reorder_items_ind' => :'reorderItemsInd',
        :'ship_ind' => :'shipInd'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ch_acc_change' => :'String',
        :'ch_acc_date' => :'String',
        :'ch_acc_pw_change' => :'String',
        :'nb_purchase_account' => :'Float',
        :'payment_acc_age' => :'String',
        :'provision_attempts_day' => :'Float',
        :'ship_address_usage' => :'String',
        :'ship_name_ind' => :'String',
        :'suspicious_acc_activity' => :'String',
        :'txn_activity_day' => :'Float',
        :'txn_activity_year' => :'Float',
        :'three_ds_req_auth_data' => :'String',
        :'three_ds_req_auth_method' => :'String',
        :'three_ds_req_auth_timestamp' => :'String',
        :'delivery_timeframe' => :'String',
        :'gift_card_amount' => :'Float',
        :'gift_card_count' => :'Float',
        :'gift_card_curr' => :'String',
        :'pre_order_date' => :'String',
        :'pre_order_purchase_ind' => :'String',
        :'reorder_items_ind' => :'String',
        :'ship_ind' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::Tds2Data` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::Tds2Data`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ch_acc_change')
        self.ch_acc_change = attributes[:'ch_acc_change']
      end

      if attributes.key?(:'ch_acc_date')
        self.ch_acc_date = attributes[:'ch_acc_date']
      end

      if attributes.key?(:'ch_acc_pw_change')
        self.ch_acc_pw_change = attributes[:'ch_acc_pw_change']
      end

      if attributes.key?(:'nb_purchase_account')
        self.nb_purchase_account = attributes[:'nb_purchase_account']
      end

      if attributes.key?(:'payment_acc_age')
        self.payment_acc_age = attributes[:'payment_acc_age']
      end

      if attributes.key?(:'provision_attempts_day')
        self.provision_attempts_day = attributes[:'provision_attempts_day']
      end

      if attributes.key?(:'ship_address_usage')
        self.ship_address_usage = attributes[:'ship_address_usage']
      end

      if attributes.key?(:'ship_name_ind')
        self.ship_name_ind = attributes[:'ship_name_ind']
      end

      if attributes.key?(:'suspicious_acc_activity')
        self.suspicious_acc_activity = attributes[:'suspicious_acc_activity']
      end

      if attributes.key?(:'txn_activity_day')
        self.txn_activity_day = attributes[:'txn_activity_day']
      end

      if attributes.key?(:'txn_activity_year')
        self.txn_activity_year = attributes[:'txn_activity_year']
      end

      if attributes.key?(:'three_ds_req_auth_data')
        self.three_ds_req_auth_data = attributes[:'three_ds_req_auth_data']
      end

      if attributes.key?(:'three_ds_req_auth_method')
        self.three_ds_req_auth_method = attributes[:'three_ds_req_auth_method']
      end

      if attributes.key?(:'three_ds_req_auth_timestamp')
        self.three_ds_req_auth_timestamp = attributes[:'three_ds_req_auth_timestamp']
      end

      if attributes.key?(:'delivery_timeframe')
        self.delivery_timeframe = attributes[:'delivery_timeframe']
      end

      if attributes.key?(:'gift_card_amount')
        self.gift_card_amount = attributes[:'gift_card_amount']
      end

      if attributes.key?(:'gift_card_count')
        self.gift_card_count = attributes[:'gift_card_count']
      end

      if attributes.key?(:'gift_card_curr')
        self.gift_card_curr = attributes[:'gift_card_curr']
      end

      if attributes.key?(:'pre_order_date')
        self.pre_order_date = attributes[:'pre_order_date']
      end

      if attributes.key?(:'pre_order_purchase_ind')
        self.pre_order_purchase_ind = attributes[:'pre_order_purchase_ind']
      end

      if attributes.key?(:'reorder_items_ind')
        self.reorder_items_ind = attributes[:'reorder_items_ind']
      end

      if attributes.key?(:'ship_ind')
        self.ship_ind = attributes[:'ship_ind']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@nb_purchase_account.nil? && @nb_purchase_account > 9999
        invalid_properties.push('invalid value for "nb_purchase_account", must be smaller than or equal to 9999.')
      end

      if !@provision_attempts_day.nil? && @provision_attempts_day > 9999
        invalid_properties.push('invalid value for "provision_attempts_day", must be smaller than or equal to 9999.')
      end

      pattern = Regexp.new(/^(01|02)$/)
      if !@ship_name_ind.nil? && @ship_name_ind !~ pattern
        invalid_properties.push("invalid value for \"ship_name_ind\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(01|02)$/)
      if !@suspicious_acc_activity.nil? && @suspicious_acc_activity !~ pattern
        invalid_properties.push("invalid value for \"suspicious_acc_activity\", must conform to the pattern #{pattern}.")
      end

      if !@txn_activity_day.nil? && @txn_activity_day > 9999
        invalid_properties.push('invalid value for "txn_activity_day", must be smaller than or equal to 9999.')
      end

      if !@txn_activity_year.nil? && @txn_activity_year > 999
        invalid_properties.push('invalid value for "txn_activity_year", must be smaller than or equal to 999.')
      end

      if !@three_ds_req_auth_data.nil? && @three_ds_req_auth_data.to_s.length > 2048
        invalid_properties.push('invalid value for "three_ds_req_auth_data", the character length must be smaller than or equal to 2048.')
      end

      pattern = Regexp.new(/^(01|02|03|04|05|06)$/)
      if !@three_ds_req_auth_method.nil? && @three_ds_req_auth_method !~ pattern
        invalid_properties.push("invalid value for \"three_ds_req_auth_method\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(01|02|03|04)$/)
      if !@delivery_timeframe.nil? && @delivery_timeframe !~ pattern
        invalid_properties.push("invalid value for \"delivery_timeframe\", must conform to the pattern #{pattern}.")
      end

      if !@gift_card_amount.nil? && @gift_card_amount > 999999999999999
        invalid_properties.push('invalid value for "gift_card_amount", must be smaller than or equal to 999999999999999.')
      end

      if !@gift_card_count.nil? && @gift_card_count > 99
        invalid_properties.push('invalid value for "gift_card_count", must be smaller than or equal to 99.')
      end

      pattern = Regexp.new(/^[0-9]{3}$/)
      if !@gift_card_curr.nil? && @gift_card_curr !~ pattern
        invalid_properties.push("invalid value for \"gift_card_curr\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(01|02)$/)
      if !@pre_order_purchase_ind.nil? && @pre_order_purchase_ind !~ pattern
        invalid_properties.push("invalid value for \"pre_order_purchase_ind\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(01|02)$/)
      if !@reorder_items_ind.nil? && @reorder_items_ind !~ pattern
        invalid_properties.push("invalid value for \"reorder_items_ind\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(01|02|03|04|05|06|07)$/)
      if !@ship_ind.nil? && @ship_ind !~ pattern
        invalid_properties.push("invalid value for \"ship_ind\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@nb_purchase_account.nil? && @nb_purchase_account > 9999
      return false if !@provision_attempts_day.nil? && @provision_attempts_day > 9999
      return false if !@ship_name_ind.nil? && @ship_name_ind !~ Regexp.new(/^(01|02)$/)
      return false if !@suspicious_acc_activity.nil? && @suspicious_acc_activity !~ Regexp.new(/^(01|02)$/)
      return false if !@txn_activity_day.nil? && @txn_activity_day > 9999
      return false if !@txn_activity_year.nil? && @txn_activity_year > 999
      return false if !@three_ds_req_auth_data.nil? && @three_ds_req_auth_data.to_s.length > 2048
      return false if !@three_ds_req_auth_method.nil? && @three_ds_req_auth_method !~ Regexp.new(/^(01|02|03|04|05|06)$/)
      return false if !@delivery_timeframe.nil? && @delivery_timeframe !~ Regexp.new(/^(01|02|03|04)$/)
      return false if !@gift_card_amount.nil? && @gift_card_amount > 999999999999999
      return false if !@gift_card_count.nil? && @gift_card_count > 99
      return false if !@gift_card_curr.nil? && @gift_card_curr !~ Regexp.new(/^[0-9]{3}$/)
      return false if !@pre_order_purchase_ind.nil? && @pre_order_purchase_ind !~ Regexp.new(/^(01|02)$/)
      return false if !@reorder_items_ind.nil? && @reorder_items_ind !~ Regexp.new(/^(01|02)$/)
      return false if !@ship_ind.nil? && @ship_ind !~ Regexp.new(/^(01|02|03|04|05|06|07)$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] nb_purchase_account Value to be assigned
    def nb_purchase_account=(nb_purchase_account)
      if nb_purchase_account.nil?
        fail ArgumentError, 'nb_purchase_account cannot be nil'
      end

      if nb_purchase_account > 9999
        fail ArgumentError, 'invalid value for "nb_purchase_account", must be smaller than or equal to 9999.'
      end

      @nb_purchase_account = nb_purchase_account
    end

    # Custom attribute writer method with validation
    # @param [Object] provision_attempts_day Value to be assigned
    def provision_attempts_day=(provision_attempts_day)
      if provision_attempts_day.nil?
        fail ArgumentError, 'provision_attempts_day cannot be nil'
      end

      if provision_attempts_day > 9999
        fail ArgumentError, 'invalid value for "provision_attempts_day", must be smaller than or equal to 9999.'
      end

      @provision_attempts_day = provision_attempts_day
    end

    # Custom attribute writer method with validation
    # @param [Object] ship_name_ind Value to be assigned
    def ship_name_ind=(ship_name_ind)
      if ship_name_ind.nil?
        fail ArgumentError, 'ship_name_ind cannot be nil'
      end

      pattern = Regexp.new(/^(01|02)$/)
      if ship_name_ind !~ pattern
        fail ArgumentError, "invalid value for \"ship_name_ind\", must conform to the pattern #{pattern}."
      end

      @ship_name_ind = ship_name_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] suspicious_acc_activity Value to be assigned
    def suspicious_acc_activity=(suspicious_acc_activity)
      if suspicious_acc_activity.nil?
        fail ArgumentError, 'suspicious_acc_activity cannot be nil'
      end

      pattern = Regexp.new(/^(01|02)$/)
      if suspicious_acc_activity !~ pattern
        fail ArgumentError, "invalid value for \"suspicious_acc_activity\", must conform to the pattern #{pattern}."
      end

      @suspicious_acc_activity = suspicious_acc_activity
    end

    # Custom attribute writer method with validation
    # @param [Object] txn_activity_day Value to be assigned
    def txn_activity_day=(txn_activity_day)
      if txn_activity_day.nil?
        fail ArgumentError, 'txn_activity_day cannot be nil'
      end

      if txn_activity_day > 9999
        fail ArgumentError, 'invalid value for "txn_activity_day", must be smaller than or equal to 9999.'
      end

      @txn_activity_day = txn_activity_day
    end

    # Custom attribute writer method with validation
    # @param [Object] txn_activity_year Value to be assigned
    def txn_activity_year=(txn_activity_year)
      if txn_activity_year.nil?
        fail ArgumentError, 'txn_activity_year cannot be nil'
      end

      if txn_activity_year > 999
        fail ArgumentError, 'invalid value for "txn_activity_year", must be smaller than or equal to 999.'
      end

      @txn_activity_year = txn_activity_year
    end

    # Custom attribute writer method with validation
    # @param [Object] three_ds_req_auth_data Value to be assigned
    def three_ds_req_auth_data=(three_ds_req_auth_data)
      if three_ds_req_auth_data.nil?
        fail ArgumentError, 'three_ds_req_auth_data cannot be nil'
      end

      if three_ds_req_auth_data.to_s.length > 2048
        fail ArgumentError, 'invalid value for "three_ds_req_auth_data", the character length must be smaller than or equal to 2048.'
      end

      @three_ds_req_auth_data = three_ds_req_auth_data
    end

    # Custom attribute writer method with validation
    # @param [Object] three_ds_req_auth_method Value to be assigned
    def three_ds_req_auth_method=(three_ds_req_auth_method)
      if three_ds_req_auth_method.nil?
        fail ArgumentError, 'three_ds_req_auth_method cannot be nil'
      end

      pattern = Regexp.new(/^(01|02|03|04|05|06)$/)
      if three_ds_req_auth_method !~ pattern
        fail ArgumentError, "invalid value for \"three_ds_req_auth_method\", must conform to the pattern #{pattern}."
      end

      @three_ds_req_auth_method = three_ds_req_auth_method
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_timeframe Value to be assigned
    def delivery_timeframe=(delivery_timeframe)
      if delivery_timeframe.nil?
        fail ArgumentError, 'delivery_timeframe cannot be nil'
      end

      pattern = Regexp.new(/^(01|02|03|04)$/)
      if delivery_timeframe !~ pattern
        fail ArgumentError, "invalid value for \"delivery_timeframe\", must conform to the pattern #{pattern}."
      end

      @delivery_timeframe = delivery_timeframe
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_card_amount Value to be assigned
    def gift_card_amount=(gift_card_amount)
      if gift_card_amount.nil?
        fail ArgumentError, 'gift_card_amount cannot be nil'
      end

      if gift_card_amount > 999999999999999
        fail ArgumentError, 'invalid value for "gift_card_amount", must be smaller than or equal to 999999999999999.'
      end

      @gift_card_amount = gift_card_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_card_count Value to be assigned
    def gift_card_count=(gift_card_count)
      if gift_card_count.nil?
        fail ArgumentError, 'gift_card_count cannot be nil'
      end

      if gift_card_count > 99
        fail ArgumentError, 'invalid value for "gift_card_count", must be smaller than or equal to 99.'
      end

      @gift_card_count = gift_card_count
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_card_curr Value to be assigned
    def gift_card_curr=(gift_card_curr)
      if gift_card_curr.nil?
        fail ArgumentError, 'gift_card_curr cannot be nil'
      end

      pattern = Regexp.new(/^[0-9]{3}$/)
      if gift_card_curr !~ pattern
        fail ArgumentError, "invalid value for \"gift_card_curr\", must conform to the pattern #{pattern}."
      end

      @gift_card_curr = gift_card_curr
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_order_purchase_ind Value to be assigned
    def pre_order_purchase_ind=(pre_order_purchase_ind)
      if pre_order_purchase_ind.nil?
        fail ArgumentError, 'pre_order_purchase_ind cannot be nil'
      end

      pattern = Regexp.new(/^(01|02)$/)
      if pre_order_purchase_ind !~ pattern
        fail ArgumentError, "invalid value for \"pre_order_purchase_ind\", must conform to the pattern #{pattern}."
      end

      @pre_order_purchase_ind = pre_order_purchase_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] reorder_items_ind Value to be assigned
    def reorder_items_ind=(reorder_items_ind)
      if reorder_items_ind.nil?
        fail ArgumentError, 'reorder_items_ind cannot be nil'
      end

      pattern = Regexp.new(/^(01|02)$/)
      if reorder_items_ind !~ pattern
        fail ArgumentError, "invalid value for \"reorder_items_ind\", must conform to the pattern #{pattern}."
      end

      @reorder_items_ind = reorder_items_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] ship_ind Value to be assigned
    def ship_ind=(ship_ind)
      if ship_ind.nil?
        fail ArgumentError, 'ship_ind cannot be nil'
      end

      pattern = Regexp.new(/^(01|02|03|04|05|06|07)$/)
      if ship_ind !~ pattern
        fail ArgumentError, "invalid value for \"ship_ind\", must conform to the pattern #{pattern}."
      end

      @ship_ind = ship_ind
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ch_acc_change == o.ch_acc_change &&
          ch_acc_date == o.ch_acc_date &&
          ch_acc_pw_change == o.ch_acc_pw_change &&
          nb_purchase_account == o.nb_purchase_account &&
          payment_acc_age == o.payment_acc_age &&
          provision_attempts_day == o.provision_attempts_day &&
          ship_address_usage == o.ship_address_usage &&
          ship_name_ind == o.ship_name_ind &&
          suspicious_acc_activity == o.suspicious_acc_activity &&
          txn_activity_day == o.txn_activity_day &&
          txn_activity_year == o.txn_activity_year &&
          three_ds_req_auth_data == o.three_ds_req_auth_data &&
          three_ds_req_auth_method == o.three_ds_req_auth_method &&
          three_ds_req_auth_timestamp == o.three_ds_req_auth_timestamp &&
          delivery_timeframe == o.delivery_timeframe &&
          gift_card_amount == o.gift_card_amount &&
          gift_card_count == o.gift_card_count &&
          gift_card_curr == o.gift_card_curr &&
          pre_order_date == o.pre_order_date &&
          pre_order_purchase_ind == o.pre_order_purchase_ind &&
          reorder_items_ind == o.reorder_items_ind &&
          ship_ind == o.ship_ind
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ch_acc_change, ch_acc_date, ch_acc_pw_change, nb_purchase_account, payment_acc_age, provision_attempts_day, ship_address_usage, ship_name_ind, suspicious_acc_activity, txn_activity_day, txn_activity_year, three_ds_req_auth_data, three_ds_req_auth_method, three_ds_req_auth_timestamp, delivery_timeframe, gift_card_amount, gift_card_count, gift_card_curr, pre_order_date, pre_order_purchase_ind, reorder_items_ind, ship_ind].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
