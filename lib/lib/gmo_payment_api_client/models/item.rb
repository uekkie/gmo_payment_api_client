=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # 商品情報
  class Item
    # 商品の名称   設定できる最大長はUTF-8で192byteです。 
    attr_accessor :name

    # 商品の説明   設定できる最大長はUTF-8で180byteです。 
    attr_accessor :description

    # 商品の購入数
    attr_accessor :quantity

    # 商品のタイプ - `DIGITAL`：デジコン - `PHYSICAL`：物販 - `SERVICE`：役務 
    attr_accessor :type

    # 商品の単価
    attr_accessor :price

    # 商品の[Merchant category code(MCC)](https://en.wikipedia.org/wiki/Merchant_category_code)   MCCは[ISO 18245](https://www.iso.org/standard/33365.html)で定められた加盟店様の業種カテゴリです。   一般的には加盟店様の業種カテゴリと商品のカテゴリは同じですが、この商品により適したものがあれば個別に設定できます。   メルペイでは必須です。 
    attr_accessor :category

    # 商品の識別番号   加盟店様が商品ごとに一意に採番した番号です。   半角のみ設定可能です。 
    attr_accessor :product_id

    # 商品の識別コード   [JANコード](https://www.gs1jp.org/code/jan/about_jan.html)や[UPCコード](https://www.gs1jp.org/code/upc/)を設定します。 半角のみ設定可能です。 
    attr_accessor :product_code

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'description' => :'description',
        :'quantity' => :'quantity',
        :'type' => :'type',
        :'price' => :'price',
        :'category' => :'category',
        :'product_id' => :'productId',
        :'product_code' => :'productCode'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'description' => :'String',
        :'quantity' => :'Integer',
        :'type' => :'String',
        :'price' => :'String',
        :'category' => :'String',
        :'product_id' => :'String',
        :'product_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::Item` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::Item`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      else
        self.quantity = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      else
        self.price = nil
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'product_code')
        self.product_code = attributes[:'product_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 128
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 128.')
      end

      if !@description.nil? && @description.to_s.length > 120
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 120.')
      end

      if @quantity.nil?
        invalid_properties.push('invalid value for "quantity", quantity cannot be nil.')
      end

      if @quantity > 9999
        invalid_properties.push('invalid value for "quantity", must be smaller than or equal to 9999.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @price.to_s.length > 15
        invalid_properties.push('invalid value for "price", the character length must be smaller than or equal to 15.')
      end

      pattern = Regexp.new(/^[0-9]{4}$/)
      if !@category.nil? && @category !~ pattern
        invalid_properties.push("invalid value for \"category\", must conform to the pattern #{pattern}.")
      end

      if !@product_id.nil? && @product_id.to_s.length > 30
        invalid_properties.push('invalid value for "product_id", the character length must be smaller than or equal to 30.')
      end

      if !@product_code.nil? && @product_code.to_s.length > 13
        invalid_properties.push('invalid value for "product_code", the character length must be smaller than or equal to 13.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @name.to_s.length > 128
      return false if !@description.nil? && @description.to_s.length > 120
      return false if @quantity.nil?
      return false if @quantity > 9999
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["DIGITAL", "PHYSICAL", "SERVICE"])
      return false unless type_validator.valid?(@type)
      return false if @price.nil?
      return false if @price.to_s.length > 15
      return false if !@category.nil? && @category !~ Regexp.new(/^[0-9]{4}$/)
      return false if !@product_id.nil? && @product_id.to_s.length > 30
      return false if !@product_code.nil? && @product_code.to_s.length > 13
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 128
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 128.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 120
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 120.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      if quantity.nil?
        fail ArgumentError, 'quantity cannot be nil'
      end

      if quantity > 9999
        fail ArgumentError, 'invalid value for "quantity", must be smaller than or equal to 9999.'
      end

      @quantity = quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["DIGITAL", "PHYSICAL", "SERVICE"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] price Value to be assigned
    def price=(price)
      if price.nil?
        fail ArgumentError, 'price cannot be nil'
      end

      if price.to_s.length > 15
        fail ArgumentError, 'invalid value for "price", the character length must be smaller than or equal to 15.'
      end

      @price = price
    end

    # Custom attribute writer method with validation
    # @param [Object] category Value to be assigned
    def category=(category)
      if category.nil?
        fail ArgumentError, 'category cannot be nil'
      end

      pattern = Regexp.new(/^[0-9]{4}$/)
      if category !~ pattern
        fail ArgumentError, "invalid value for \"category\", must conform to the pattern #{pattern}."
      end

      @category = category
    end

    # Custom attribute writer method with validation
    # @param [Object] product_id Value to be assigned
    def product_id=(product_id)
      if product_id.nil?
        fail ArgumentError, 'product_id cannot be nil'
      end

      if product_id.to_s.length > 30
        fail ArgumentError, 'invalid value for "product_id", the character length must be smaller than or equal to 30.'
      end

      @product_id = product_id
    end

    # Custom attribute writer method with validation
    # @param [Object] product_code Value to be assigned
    def product_code=(product_code)
      if product_code.nil?
        fail ArgumentError, 'product_code cannot be nil'
      end

      if product_code.to_s.length > 13
        fail ArgumentError, 'invalid value for "product_code", the character length must be smaller than or equal to 13.'
      end

      @product_code = product_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          description == o.description &&
          quantity == o.quantity &&
          type == o.type &&
          price == o.price &&
          category == o.category &&
          product_id == o.product_id &&
          product_code == o.product_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, description, quantity, type, price, category, product_id, product_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
