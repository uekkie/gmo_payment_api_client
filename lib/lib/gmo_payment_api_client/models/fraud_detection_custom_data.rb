=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module GmoPaymentApiClient
  # 不正検知カスタム情報
  class FraudDetectionCustomData
    # カスタム項目1   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data1

    # カスタム項目2   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data2

    # カスタム項目3   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data3

    # カスタム項目4   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data4

    # カスタム項目5   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data5

    # カスタム項目6   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data6

    # カスタム項目7   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data7

    # カスタム項目8   設定できる最大長はUTF-8で256byteです。 
    attr_accessor :custom_data8

    # カスタム項目9   設定できる最大長はUTF-8で256byteです。 
    attr_accessor :custom_data9

    # カスタム項目10   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data10

    # カスタム項目11
    attr_accessor :custom_data11

    # カスタム項目12
    attr_accessor :custom_data12

    # カスタム項目13   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data13

    # カスタム項目14   <span style=\"color: #d41f1c\">現在未使用</span> 
    attr_accessor :custom_data14

    # カスタム項目15
    attr_accessor :custom_data15

    # カスタム項目16   設定できる最大長はUTF-8で30byteです。 
    attr_accessor :custom_data16

    # カスタム項目17
    attr_accessor :custom_data17

    # カスタム項目18
    attr_accessor :custom_data18

    # カスタム項目19   設定できる最大長はUTF-8で30byteです。 
    attr_accessor :custom_data19

    # カスタム項目20
    attr_accessor :custom_data20

    # カスタム項目21   設定できる最大長はUTF-8で30byteです。 
    attr_accessor :custom_data21

    # カスタム項目22   設定できる最大長はUTF-8で30byteです。 
    attr_accessor :custom_data22

    # カスタム項目23   設定できる最大長はUTF-8で30byteです。 
    attr_accessor :custom_data23

    # カスタム項目24   設定できる最大長はUTF-8で30byteです。 
    attr_accessor :custom_data24

    # カスタム項目25   設定できる最大長はUTF-8で30byteです。 
    attr_accessor :custom_data25

    # カスタム項目26   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data26

    # カスタム項目27   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data27

    # カスタム項目28   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data28

    # カスタム項目29   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data29

    # カスタム項目30   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data30

    # カスタム項目31   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data31

    # カスタム項目32   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data32

    # カスタム項目33   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data33

    # カスタム項目34   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data34

    # カスタム項目35   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data35

    # カスタム項目36   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data36

    # カスタム項目37   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data37

    # カスタム項目38   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data38

    # カスタム項目39   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data39

    # カスタム項目40   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data40

    # カスタム項目41   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data41

    # カスタム項目42   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data42

    # カスタム項目43   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data43

    # カスタム項目44   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data44

    # カスタム項目45   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data45

    # カスタム項目46   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data46

    # カスタム項目47   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data47

    # カスタム項目48   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data48

    # カスタム項目49   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data49

    # カスタム項目50   設定できる最大長はUTF-8で255byteです。 
    attr_accessor :custom_data50

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'custom_data1' => :'customData1',
        :'custom_data2' => :'customData2',
        :'custom_data3' => :'customData3',
        :'custom_data4' => :'customData4',
        :'custom_data5' => :'customData5',
        :'custom_data6' => :'customData6',
        :'custom_data7' => :'customData7',
        :'custom_data8' => :'customData8',
        :'custom_data9' => :'customData9',
        :'custom_data10' => :'customData10',
        :'custom_data11' => :'customData11',
        :'custom_data12' => :'customData12',
        :'custom_data13' => :'customData13',
        :'custom_data14' => :'customData14',
        :'custom_data15' => :'customData15',
        :'custom_data16' => :'customData16',
        :'custom_data17' => :'customData17',
        :'custom_data18' => :'customData18',
        :'custom_data19' => :'customData19',
        :'custom_data20' => :'customData20',
        :'custom_data21' => :'customData21',
        :'custom_data22' => :'customData22',
        :'custom_data23' => :'customData23',
        :'custom_data24' => :'customData24',
        :'custom_data25' => :'customData25',
        :'custom_data26' => :'customData26',
        :'custom_data27' => :'customData27',
        :'custom_data28' => :'customData28',
        :'custom_data29' => :'customData29',
        :'custom_data30' => :'customData30',
        :'custom_data31' => :'customData31',
        :'custom_data32' => :'customData32',
        :'custom_data33' => :'customData33',
        :'custom_data34' => :'customData34',
        :'custom_data35' => :'customData35',
        :'custom_data36' => :'customData36',
        :'custom_data37' => :'customData37',
        :'custom_data38' => :'customData38',
        :'custom_data39' => :'customData39',
        :'custom_data40' => :'customData40',
        :'custom_data41' => :'customData41',
        :'custom_data42' => :'customData42',
        :'custom_data43' => :'customData43',
        :'custom_data44' => :'customData44',
        :'custom_data45' => :'customData45',
        :'custom_data46' => :'customData46',
        :'custom_data47' => :'customData47',
        :'custom_data48' => :'customData48',
        :'custom_data49' => :'customData49',
        :'custom_data50' => :'customData50'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'custom_data1' => :'String',
        :'custom_data2' => :'String',
        :'custom_data3' => :'String',
        :'custom_data4' => :'String',
        :'custom_data5' => :'String',
        :'custom_data6' => :'String',
        :'custom_data7' => :'String',
        :'custom_data8' => :'String',
        :'custom_data9' => :'String',
        :'custom_data10' => :'String',
        :'custom_data11' => :'String',
        :'custom_data12' => :'String',
        :'custom_data13' => :'String',
        :'custom_data14' => :'String',
        :'custom_data15' => :'Boolean',
        :'custom_data16' => :'String',
        :'custom_data17' => :'String',
        :'custom_data18' => :'String',
        :'custom_data19' => :'String',
        :'custom_data20' => :'String',
        :'custom_data21' => :'String',
        :'custom_data22' => :'String',
        :'custom_data23' => :'String',
        :'custom_data24' => :'String',
        :'custom_data25' => :'String',
        :'custom_data26' => :'String',
        :'custom_data27' => :'String',
        :'custom_data28' => :'String',
        :'custom_data29' => :'String',
        :'custom_data30' => :'String',
        :'custom_data31' => :'String',
        :'custom_data32' => :'String',
        :'custom_data33' => :'String',
        :'custom_data34' => :'String',
        :'custom_data35' => :'String',
        :'custom_data36' => :'String',
        :'custom_data37' => :'String',
        :'custom_data38' => :'String',
        :'custom_data39' => :'String',
        :'custom_data40' => :'String',
        :'custom_data41' => :'String',
        :'custom_data42' => :'String',
        :'custom_data43' => :'String',
        :'custom_data44' => :'String',
        :'custom_data45' => :'String',
        :'custom_data46' => :'String',
        :'custom_data47' => :'String',
        :'custom_data48' => :'String',
        :'custom_data49' => :'String',
        :'custom_data50' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GmoPaymentApiClient::FraudDetectionCustomData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GmoPaymentApiClient::FraudDetectionCustomData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'custom_data1')
        self.custom_data1 = attributes[:'custom_data1']
      end

      if attributes.key?(:'custom_data2')
        self.custom_data2 = attributes[:'custom_data2']
      end

      if attributes.key?(:'custom_data3')
        self.custom_data3 = attributes[:'custom_data3']
      end

      if attributes.key?(:'custom_data4')
        self.custom_data4 = attributes[:'custom_data4']
      end

      if attributes.key?(:'custom_data5')
        self.custom_data5 = attributes[:'custom_data5']
      end

      if attributes.key?(:'custom_data6')
        self.custom_data6 = attributes[:'custom_data6']
      end

      if attributes.key?(:'custom_data7')
        self.custom_data7 = attributes[:'custom_data7']
      end

      if attributes.key?(:'custom_data8')
        self.custom_data8 = attributes[:'custom_data8']
      end

      if attributes.key?(:'custom_data9')
        self.custom_data9 = attributes[:'custom_data9']
      end

      if attributes.key?(:'custom_data10')
        self.custom_data10 = attributes[:'custom_data10']
      end

      if attributes.key?(:'custom_data11')
        self.custom_data11 = attributes[:'custom_data11']
      end

      if attributes.key?(:'custom_data12')
        self.custom_data12 = attributes[:'custom_data12']
      end

      if attributes.key?(:'custom_data13')
        self.custom_data13 = attributes[:'custom_data13']
      end

      if attributes.key?(:'custom_data14')
        self.custom_data14 = attributes[:'custom_data14']
      end

      if attributes.key?(:'custom_data15')
        self.custom_data15 = attributes[:'custom_data15']
      end

      if attributes.key?(:'custom_data16')
        self.custom_data16 = attributes[:'custom_data16']
      end

      if attributes.key?(:'custom_data17')
        self.custom_data17 = attributes[:'custom_data17']
      end

      if attributes.key?(:'custom_data18')
        self.custom_data18 = attributes[:'custom_data18']
      end

      if attributes.key?(:'custom_data19')
        self.custom_data19 = attributes[:'custom_data19']
      end

      if attributes.key?(:'custom_data20')
        self.custom_data20 = attributes[:'custom_data20']
      end

      if attributes.key?(:'custom_data21')
        self.custom_data21 = attributes[:'custom_data21']
      end

      if attributes.key?(:'custom_data22')
        self.custom_data22 = attributes[:'custom_data22']
      end

      if attributes.key?(:'custom_data23')
        self.custom_data23 = attributes[:'custom_data23']
      end

      if attributes.key?(:'custom_data24')
        self.custom_data24 = attributes[:'custom_data24']
      end

      if attributes.key?(:'custom_data25')
        self.custom_data25 = attributes[:'custom_data25']
      end

      if attributes.key?(:'custom_data26')
        self.custom_data26 = attributes[:'custom_data26']
      end

      if attributes.key?(:'custom_data27')
        self.custom_data27 = attributes[:'custom_data27']
      end

      if attributes.key?(:'custom_data28')
        self.custom_data28 = attributes[:'custom_data28']
      end

      if attributes.key?(:'custom_data29')
        self.custom_data29 = attributes[:'custom_data29']
      end

      if attributes.key?(:'custom_data30')
        self.custom_data30 = attributes[:'custom_data30']
      end

      if attributes.key?(:'custom_data31')
        self.custom_data31 = attributes[:'custom_data31']
      end

      if attributes.key?(:'custom_data32')
        self.custom_data32 = attributes[:'custom_data32']
      end

      if attributes.key?(:'custom_data33')
        self.custom_data33 = attributes[:'custom_data33']
      end

      if attributes.key?(:'custom_data34')
        self.custom_data34 = attributes[:'custom_data34']
      end

      if attributes.key?(:'custom_data35')
        self.custom_data35 = attributes[:'custom_data35']
      end

      if attributes.key?(:'custom_data36')
        self.custom_data36 = attributes[:'custom_data36']
      end

      if attributes.key?(:'custom_data37')
        self.custom_data37 = attributes[:'custom_data37']
      end

      if attributes.key?(:'custom_data38')
        self.custom_data38 = attributes[:'custom_data38']
      end

      if attributes.key?(:'custom_data39')
        self.custom_data39 = attributes[:'custom_data39']
      end

      if attributes.key?(:'custom_data40')
        self.custom_data40 = attributes[:'custom_data40']
      end

      if attributes.key?(:'custom_data41')
        self.custom_data41 = attributes[:'custom_data41']
      end

      if attributes.key?(:'custom_data42')
        self.custom_data42 = attributes[:'custom_data42']
      end

      if attributes.key?(:'custom_data43')
        self.custom_data43 = attributes[:'custom_data43']
      end

      if attributes.key?(:'custom_data44')
        self.custom_data44 = attributes[:'custom_data44']
      end

      if attributes.key?(:'custom_data45')
        self.custom_data45 = attributes[:'custom_data45']
      end

      if attributes.key?(:'custom_data46')
        self.custom_data46 = attributes[:'custom_data46']
      end

      if attributes.key?(:'custom_data47')
        self.custom_data47 = attributes[:'custom_data47']
      end

      if attributes.key?(:'custom_data48')
        self.custom_data48 = attributes[:'custom_data48']
      end

      if attributes.key?(:'custom_data49')
        self.custom_data49 = attributes[:'custom_data49']
      end

      if attributes.key?(:'custom_data50')
        self.custom_data50 = attributes[:'custom_data50']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@custom_data1.nil? && @custom_data1.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data1", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data2.nil? && @custom_data2.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data2", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data3.nil? && @custom_data3.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data3", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data4.nil? && @custom_data4.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data4", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data5.nil? && @custom_data5.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data5", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data6.nil? && @custom_data6.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data6", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data7.nil? && @custom_data7.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data7", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data8.nil? && @custom_data8.to_s.length > 256
        invalid_properties.push('invalid value for "custom_data8", the character length must be smaller than or equal to 256.')
      end

      if !@custom_data9.nil? && @custom_data9.to_s.length > 256
        invalid_properties.push('invalid value for "custom_data9", the character length must be smaller than or equal to 256.')
      end

      if !@custom_data10.nil? && @custom_data10.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data10", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data11.nil? && @custom_data11.to_s.length > 9
        invalid_properties.push('invalid value for "custom_data11", the character length must be smaller than or equal to 9.')
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@custom_data11.nil? && @custom_data11 !~ pattern
        invalid_properties.push("invalid value for \"custom_data11\", must conform to the pattern #{pattern}.")
      end

      if !@custom_data12.nil? && @custom_data12.to_s.length > 9
        invalid_properties.push('invalid value for "custom_data12", the character length must be smaller than or equal to 9.')
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@custom_data12.nil? && @custom_data12 !~ pattern
        invalid_properties.push("invalid value for \"custom_data12\", must conform to the pattern #{pattern}.")
      end

      if !@custom_data13.nil? && @custom_data13.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data13", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data14.nil? && @custom_data14.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data14", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data16.nil? && @custom_data16.to_s.length > 30
        invalid_properties.push('invalid value for "custom_data16", the character length must be smaller than or equal to 30.')
      end

      if !@custom_data17.nil? && @custom_data17.to_s.length > 9
        invalid_properties.push('invalid value for "custom_data17", the character length must be smaller than or equal to 9.')
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@custom_data17.nil? && @custom_data17 !~ pattern
        invalid_properties.push("invalid value for \"custom_data17\", must conform to the pattern #{pattern}.")
      end

      if !@custom_data18.nil? && @custom_data18.to_s.length > 9
        invalid_properties.push('invalid value for "custom_data18", the character length must be smaller than or equal to 9.')
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@custom_data18.nil? && @custom_data18 !~ pattern
        invalid_properties.push("invalid value for \"custom_data18\", must conform to the pattern #{pattern}.")
      end

      if !@custom_data19.nil? && @custom_data19.to_s.length > 30
        invalid_properties.push('invalid value for "custom_data19", the character length must be smaller than or equal to 30.')
      end

      if !@custom_data20.nil? && @custom_data20.to_s.length > 9
        invalid_properties.push('invalid value for "custom_data20", the character length must be smaller than or equal to 9.')
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@custom_data20.nil? && @custom_data20 !~ pattern
        invalid_properties.push("invalid value for \"custom_data20\", must conform to the pattern #{pattern}.")
      end

      if !@custom_data21.nil? && @custom_data21.to_s.length > 30
        invalid_properties.push('invalid value for "custom_data21", the character length must be smaller than or equal to 30.')
      end

      if !@custom_data22.nil? && @custom_data22.to_s.length > 30
        invalid_properties.push('invalid value for "custom_data22", the character length must be smaller than or equal to 30.')
      end

      if !@custom_data23.nil? && @custom_data23.to_s.length > 30
        invalid_properties.push('invalid value for "custom_data23", the character length must be smaller than or equal to 30.')
      end

      if !@custom_data24.nil? && @custom_data24.to_s.length > 30
        invalid_properties.push('invalid value for "custom_data24", the character length must be smaller than or equal to 30.')
      end

      if !@custom_data25.nil? && @custom_data25.to_s.length > 30
        invalid_properties.push('invalid value for "custom_data25", the character length must be smaller than or equal to 30.')
      end

      if !@custom_data26.nil? && @custom_data26.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data26", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data27.nil? && @custom_data27.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data27", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data28.nil? && @custom_data28.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data28", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data29.nil? && @custom_data29.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data29", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data30.nil? && @custom_data30.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data30", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data31.nil? && @custom_data31.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data31", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data32.nil? && @custom_data32.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data32", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data33.nil? && @custom_data33.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data33", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data34.nil? && @custom_data34.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data34", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data35.nil? && @custom_data35.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data35", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data36.nil? && @custom_data36.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data36", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data37.nil? && @custom_data37.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data37", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data38.nil? && @custom_data38.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data38", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data39.nil? && @custom_data39.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data39", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data40.nil? && @custom_data40.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data40", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data41.nil? && @custom_data41.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data41", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data42.nil? && @custom_data42.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data42", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data43.nil? && @custom_data43.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data43", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data44.nil? && @custom_data44.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data44", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data45.nil? && @custom_data45.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data45", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data46.nil? && @custom_data46.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data46", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data47.nil? && @custom_data47.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data47", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data48.nil? && @custom_data48.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data48", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data49.nil? && @custom_data49.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data49", the character length must be smaller than or equal to 255.')
      end

      if !@custom_data50.nil? && @custom_data50.to_s.length > 255
        invalid_properties.push('invalid value for "custom_data50", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@custom_data1.nil? && @custom_data1.to_s.length > 255
      return false if !@custom_data2.nil? && @custom_data2.to_s.length > 255
      return false if !@custom_data3.nil? && @custom_data3.to_s.length > 255
      return false if !@custom_data4.nil? && @custom_data4.to_s.length > 255
      return false if !@custom_data5.nil? && @custom_data5.to_s.length > 255
      return false if !@custom_data6.nil? && @custom_data6.to_s.length > 255
      return false if !@custom_data7.nil? && @custom_data7.to_s.length > 255
      return false if !@custom_data8.nil? && @custom_data8.to_s.length > 256
      return false if !@custom_data9.nil? && @custom_data9.to_s.length > 256
      return false if !@custom_data10.nil? && @custom_data10.to_s.length > 255
      return false if !@custom_data11.nil? && @custom_data11.to_s.length > 9
      return false if !@custom_data11.nil? && @custom_data11 !~ Regexp.new(/^[0-9]+$/)
      return false if !@custom_data12.nil? && @custom_data12.to_s.length > 9
      return false if !@custom_data12.nil? && @custom_data12 !~ Regexp.new(/^[0-9]+$/)
      return false if !@custom_data13.nil? && @custom_data13.to_s.length > 255
      return false if !@custom_data14.nil? && @custom_data14.to_s.length > 255
      return false if !@custom_data16.nil? && @custom_data16.to_s.length > 30
      return false if !@custom_data17.nil? && @custom_data17.to_s.length > 9
      return false if !@custom_data17.nil? && @custom_data17 !~ Regexp.new(/^[0-9]+$/)
      return false if !@custom_data18.nil? && @custom_data18.to_s.length > 9
      return false if !@custom_data18.nil? && @custom_data18 !~ Regexp.new(/^[0-9]+$/)
      return false if !@custom_data19.nil? && @custom_data19.to_s.length > 30
      return false if !@custom_data20.nil? && @custom_data20.to_s.length > 9
      return false if !@custom_data20.nil? && @custom_data20 !~ Regexp.new(/^[0-9]+$/)
      return false if !@custom_data21.nil? && @custom_data21.to_s.length > 30
      return false if !@custom_data22.nil? && @custom_data22.to_s.length > 30
      return false if !@custom_data23.nil? && @custom_data23.to_s.length > 30
      return false if !@custom_data24.nil? && @custom_data24.to_s.length > 30
      return false if !@custom_data25.nil? && @custom_data25.to_s.length > 30
      return false if !@custom_data26.nil? && @custom_data26.to_s.length > 255
      return false if !@custom_data27.nil? && @custom_data27.to_s.length > 255
      return false if !@custom_data28.nil? && @custom_data28.to_s.length > 255
      return false if !@custom_data29.nil? && @custom_data29.to_s.length > 255
      return false if !@custom_data30.nil? && @custom_data30.to_s.length > 255
      return false if !@custom_data31.nil? && @custom_data31.to_s.length > 255
      return false if !@custom_data32.nil? && @custom_data32.to_s.length > 255
      return false if !@custom_data33.nil? && @custom_data33.to_s.length > 255
      return false if !@custom_data34.nil? && @custom_data34.to_s.length > 255
      return false if !@custom_data35.nil? && @custom_data35.to_s.length > 255
      return false if !@custom_data36.nil? && @custom_data36.to_s.length > 255
      return false if !@custom_data37.nil? && @custom_data37.to_s.length > 255
      return false if !@custom_data38.nil? && @custom_data38.to_s.length > 255
      return false if !@custom_data39.nil? && @custom_data39.to_s.length > 255
      return false if !@custom_data40.nil? && @custom_data40.to_s.length > 255
      return false if !@custom_data41.nil? && @custom_data41.to_s.length > 255
      return false if !@custom_data42.nil? && @custom_data42.to_s.length > 255
      return false if !@custom_data43.nil? && @custom_data43.to_s.length > 255
      return false if !@custom_data44.nil? && @custom_data44.to_s.length > 255
      return false if !@custom_data45.nil? && @custom_data45.to_s.length > 255
      return false if !@custom_data46.nil? && @custom_data46.to_s.length > 255
      return false if !@custom_data47.nil? && @custom_data47.to_s.length > 255
      return false if !@custom_data48.nil? && @custom_data48.to_s.length > 255
      return false if !@custom_data49.nil? && @custom_data49.to_s.length > 255
      return false if !@custom_data50.nil? && @custom_data50.to_s.length > 255
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data1 Value to be assigned
    def custom_data1=(custom_data1)
      if custom_data1.nil?
        fail ArgumentError, 'custom_data1 cannot be nil'
      end

      if custom_data1.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data1", the character length must be smaller than or equal to 255.'
      end

      @custom_data1 = custom_data1
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data2 Value to be assigned
    def custom_data2=(custom_data2)
      if custom_data2.nil?
        fail ArgumentError, 'custom_data2 cannot be nil'
      end

      if custom_data2.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data2", the character length must be smaller than or equal to 255.'
      end

      @custom_data2 = custom_data2
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data3 Value to be assigned
    def custom_data3=(custom_data3)
      if custom_data3.nil?
        fail ArgumentError, 'custom_data3 cannot be nil'
      end

      if custom_data3.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data3", the character length must be smaller than or equal to 255.'
      end

      @custom_data3 = custom_data3
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data4 Value to be assigned
    def custom_data4=(custom_data4)
      if custom_data4.nil?
        fail ArgumentError, 'custom_data4 cannot be nil'
      end

      if custom_data4.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data4", the character length must be smaller than or equal to 255.'
      end

      @custom_data4 = custom_data4
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data5 Value to be assigned
    def custom_data5=(custom_data5)
      if custom_data5.nil?
        fail ArgumentError, 'custom_data5 cannot be nil'
      end

      if custom_data5.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data5", the character length must be smaller than or equal to 255.'
      end

      @custom_data5 = custom_data5
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data6 Value to be assigned
    def custom_data6=(custom_data6)
      if custom_data6.nil?
        fail ArgumentError, 'custom_data6 cannot be nil'
      end

      if custom_data6.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data6", the character length must be smaller than or equal to 255.'
      end

      @custom_data6 = custom_data6
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data7 Value to be assigned
    def custom_data7=(custom_data7)
      if custom_data7.nil?
        fail ArgumentError, 'custom_data7 cannot be nil'
      end

      if custom_data7.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data7", the character length must be smaller than or equal to 255.'
      end

      @custom_data7 = custom_data7
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data8 Value to be assigned
    def custom_data8=(custom_data8)
      if custom_data8.nil?
        fail ArgumentError, 'custom_data8 cannot be nil'
      end

      if custom_data8.to_s.length > 256
        fail ArgumentError, 'invalid value for "custom_data8", the character length must be smaller than or equal to 256.'
      end

      @custom_data8 = custom_data8
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data9 Value to be assigned
    def custom_data9=(custom_data9)
      if custom_data9.nil?
        fail ArgumentError, 'custom_data9 cannot be nil'
      end

      if custom_data9.to_s.length > 256
        fail ArgumentError, 'invalid value for "custom_data9", the character length must be smaller than or equal to 256.'
      end

      @custom_data9 = custom_data9
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data10 Value to be assigned
    def custom_data10=(custom_data10)
      if custom_data10.nil?
        fail ArgumentError, 'custom_data10 cannot be nil'
      end

      if custom_data10.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data10", the character length must be smaller than or equal to 255.'
      end

      @custom_data10 = custom_data10
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data11 Value to be assigned
    def custom_data11=(custom_data11)
      if custom_data11.nil?
        fail ArgumentError, 'custom_data11 cannot be nil'
      end

      if custom_data11.to_s.length > 9
        fail ArgumentError, 'invalid value for "custom_data11", the character length must be smaller than or equal to 9.'
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if custom_data11 !~ pattern
        fail ArgumentError, "invalid value for \"custom_data11\", must conform to the pattern #{pattern}."
      end

      @custom_data11 = custom_data11
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data12 Value to be assigned
    def custom_data12=(custom_data12)
      if custom_data12.nil?
        fail ArgumentError, 'custom_data12 cannot be nil'
      end

      if custom_data12.to_s.length > 9
        fail ArgumentError, 'invalid value for "custom_data12", the character length must be smaller than or equal to 9.'
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if custom_data12 !~ pattern
        fail ArgumentError, "invalid value for \"custom_data12\", must conform to the pattern #{pattern}."
      end

      @custom_data12 = custom_data12
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data13 Value to be assigned
    def custom_data13=(custom_data13)
      if custom_data13.nil?
        fail ArgumentError, 'custom_data13 cannot be nil'
      end

      if custom_data13.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data13", the character length must be smaller than or equal to 255.'
      end

      @custom_data13 = custom_data13
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data14 Value to be assigned
    def custom_data14=(custom_data14)
      if custom_data14.nil?
        fail ArgumentError, 'custom_data14 cannot be nil'
      end

      if custom_data14.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data14", the character length must be smaller than or equal to 255.'
      end

      @custom_data14 = custom_data14
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data16 Value to be assigned
    def custom_data16=(custom_data16)
      if custom_data16.nil?
        fail ArgumentError, 'custom_data16 cannot be nil'
      end

      if custom_data16.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_data16", the character length must be smaller than or equal to 30.'
      end

      @custom_data16 = custom_data16
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data17 Value to be assigned
    def custom_data17=(custom_data17)
      if custom_data17.nil?
        fail ArgumentError, 'custom_data17 cannot be nil'
      end

      if custom_data17.to_s.length > 9
        fail ArgumentError, 'invalid value for "custom_data17", the character length must be smaller than or equal to 9.'
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if custom_data17 !~ pattern
        fail ArgumentError, "invalid value for \"custom_data17\", must conform to the pattern #{pattern}."
      end

      @custom_data17 = custom_data17
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data18 Value to be assigned
    def custom_data18=(custom_data18)
      if custom_data18.nil?
        fail ArgumentError, 'custom_data18 cannot be nil'
      end

      if custom_data18.to_s.length > 9
        fail ArgumentError, 'invalid value for "custom_data18", the character length must be smaller than or equal to 9.'
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if custom_data18 !~ pattern
        fail ArgumentError, "invalid value for \"custom_data18\", must conform to the pattern #{pattern}."
      end

      @custom_data18 = custom_data18
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data19 Value to be assigned
    def custom_data19=(custom_data19)
      if custom_data19.nil?
        fail ArgumentError, 'custom_data19 cannot be nil'
      end

      if custom_data19.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_data19", the character length must be smaller than or equal to 30.'
      end

      @custom_data19 = custom_data19
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data20 Value to be assigned
    def custom_data20=(custom_data20)
      if custom_data20.nil?
        fail ArgumentError, 'custom_data20 cannot be nil'
      end

      if custom_data20.to_s.length > 9
        fail ArgumentError, 'invalid value for "custom_data20", the character length must be smaller than or equal to 9.'
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if custom_data20 !~ pattern
        fail ArgumentError, "invalid value for \"custom_data20\", must conform to the pattern #{pattern}."
      end

      @custom_data20 = custom_data20
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data21 Value to be assigned
    def custom_data21=(custom_data21)
      if custom_data21.nil?
        fail ArgumentError, 'custom_data21 cannot be nil'
      end

      if custom_data21.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_data21", the character length must be smaller than or equal to 30.'
      end

      @custom_data21 = custom_data21
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data22 Value to be assigned
    def custom_data22=(custom_data22)
      if custom_data22.nil?
        fail ArgumentError, 'custom_data22 cannot be nil'
      end

      if custom_data22.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_data22", the character length must be smaller than or equal to 30.'
      end

      @custom_data22 = custom_data22
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data23 Value to be assigned
    def custom_data23=(custom_data23)
      if custom_data23.nil?
        fail ArgumentError, 'custom_data23 cannot be nil'
      end

      if custom_data23.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_data23", the character length must be smaller than or equal to 30.'
      end

      @custom_data23 = custom_data23
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data24 Value to be assigned
    def custom_data24=(custom_data24)
      if custom_data24.nil?
        fail ArgumentError, 'custom_data24 cannot be nil'
      end

      if custom_data24.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_data24", the character length must be smaller than or equal to 30.'
      end

      @custom_data24 = custom_data24
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data25 Value to be assigned
    def custom_data25=(custom_data25)
      if custom_data25.nil?
        fail ArgumentError, 'custom_data25 cannot be nil'
      end

      if custom_data25.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_data25", the character length must be smaller than or equal to 30.'
      end

      @custom_data25 = custom_data25
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data26 Value to be assigned
    def custom_data26=(custom_data26)
      if custom_data26.nil?
        fail ArgumentError, 'custom_data26 cannot be nil'
      end

      if custom_data26.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data26", the character length must be smaller than or equal to 255.'
      end

      @custom_data26 = custom_data26
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data27 Value to be assigned
    def custom_data27=(custom_data27)
      if custom_data27.nil?
        fail ArgumentError, 'custom_data27 cannot be nil'
      end

      if custom_data27.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data27", the character length must be smaller than or equal to 255.'
      end

      @custom_data27 = custom_data27
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data28 Value to be assigned
    def custom_data28=(custom_data28)
      if custom_data28.nil?
        fail ArgumentError, 'custom_data28 cannot be nil'
      end

      if custom_data28.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data28", the character length must be smaller than or equal to 255.'
      end

      @custom_data28 = custom_data28
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data29 Value to be assigned
    def custom_data29=(custom_data29)
      if custom_data29.nil?
        fail ArgumentError, 'custom_data29 cannot be nil'
      end

      if custom_data29.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data29", the character length must be smaller than or equal to 255.'
      end

      @custom_data29 = custom_data29
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data30 Value to be assigned
    def custom_data30=(custom_data30)
      if custom_data30.nil?
        fail ArgumentError, 'custom_data30 cannot be nil'
      end

      if custom_data30.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data30", the character length must be smaller than or equal to 255.'
      end

      @custom_data30 = custom_data30
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data31 Value to be assigned
    def custom_data31=(custom_data31)
      if custom_data31.nil?
        fail ArgumentError, 'custom_data31 cannot be nil'
      end

      if custom_data31.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data31", the character length must be smaller than or equal to 255.'
      end

      @custom_data31 = custom_data31
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data32 Value to be assigned
    def custom_data32=(custom_data32)
      if custom_data32.nil?
        fail ArgumentError, 'custom_data32 cannot be nil'
      end

      if custom_data32.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data32", the character length must be smaller than or equal to 255.'
      end

      @custom_data32 = custom_data32
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data33 Value to be assigned
    def custom_data33=(custom_data33)
      if custom_data33.nil?
        fail ArgumentError, 'custom_data33 cannot be nil'
      end

      if custom_data33.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data33", the character length must be smaller than or equal to 255.'
      end

      @custom_data33 = custom_data33
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data34 Value to be assigned
    def custom_data34=(custom_data34)
      if custom_data34.nil?
        fail ArgumentError, 'custom_data34 cannot be nil'
      end

      if custom_data34.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data34", the character length must be smaller than or equal to 255.'
      end

      @custom_data34 = custom_data34
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data35 Value to be assigned
    def custom_data35=(custom_data35)
      if custom_data35.nil?
        fail ArgumentError, 'custom_data35 cannot be nil'
      end

      if custom_data35.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data35", the character length must be smaller than or equal to 255.'
      end

      @custom_data35 = custom_data35
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data36 Value to be assigned
    def custom_data36=(custom_data36)
      if custom_data36.nil?
        fail ArgumentError, 'custom_data36 cannot be nil'
      end

      if custom_data36.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data36", the character length must be smaller than or equal to 255.'
      end

      @custom_data36 = custom_data36
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data37 Value to be assigned
    def custom_data37=(custom_data37)
      if custom_data37.nil?
        fail ArgumentError, 'custom_data37 cannot be nil'
      end

      if custom_data37.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data37", the character length must be smaller than or equal to 255.'
      end

      @custom_data37 = custom_data37
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data38 Value to be assigned
    def custom_data38=(custom_data38)
      if custom_data38.nil?
        fail ArgumentError, 'custom_data38 cannot be nil'
      end

      if custom_data38.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data38", the character length must be smaller than or equal to 255.'
      end

      @custom_data38 = custom_data38
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data39 Value to be assigned
    def custom_data39=(custom_data39)
      if custom_data39.nil?
        fail ArgumentError, 'custom_data39 cannot be nil'
      end

      if custom_data39.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data39", the character length must be smaller than or equal to 255.'
      end

      @custom_data39 = custom_data39
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data40 Value to be assigned
    def custom_data40=(custom_data40)
      if custom_data40.nil?
        fail ArgumentError, 'custom_data40 cannot be nil'
      end

      if custom_data40.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data40", the character length must be smaller than or equal to 255.'
      end

      @custom_data40 = custom_data40
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data41 Value to be assigned
    def custom_data41=(custom_data41)
      if custom_data41.nil?
        fail ArgumentError, 'custom_data41 cannot be nil'
      end

      if custom_data41.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data41", the character length must be smaller than or equal to 255.'
      end

      @custom_data41 = custom_data41
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data42 Value to be assigned
    def custom_data42=(custom_data42)
      if custom_data42.nil?
        fail ArgumentError, 'custom_data42 cannot be nil'
      end

      if custom_data42.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data42", the character length must be smaller than or equal to 255.'
      end

      @custom_data42 = custom_data42
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data43 Value to be assigned
    def custom_data43=(custom_data43)
      if custom_data43.nil?
        fail ArgumentError, 'custom_data43 cannot be nil'
      end

      if custom_data43.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data43", the character length must be smaller than or equal to 255.'
      end

      @custom_data43 = custom_data43
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data44 Value to be assigned
    def custom_data44=(custom_data44)
      if custom_data44.nil?
        fail ArgumentError, 'custom_data44 cannot be nil'
      end

      if custom_data44.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data44", the character length must be smaller than or equal to 255.'
      end

      @custom_data44 = custom_data44
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data45 Value to be assigned
    def custom_data45=(custom_data45)
      if custom_data45.nil?
        fail ArgumentError, 'custom_data45 cannot be nil'
      end

      if custom_data45.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data45", the character length must be smaller than or equal to 255.'
      end

      @custom_data45 = custom_data45
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data46 Value to be assigned
    def custom_data46=(custom_data46)
      if custom_data46.nil?
        fail ArgumentError, 'custom_data46 cannot be nil'
      end

      if custom_data46.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data46", the character length must be smaller than or equal to 255.'
      end

      @custom_data46 = custom_data46
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data47 Value to be assigned
    def custom_data47=(custom_data47)
      if custom_data47.nil?
        fail ArgumentError, 'custom_data47 cannot be nil'
      end

      if custom_data47.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data47", the character length must be smaller than or equal to 255.'
      end

      @custom_data47 = custom_data47
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data48 Value to be assigned
    def custom_data48=(custom_data48)
      if custom_data48.nil?
        fail ArgumentError, 'custom_data48 cannot be nil'
      end

      if custom_data48.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data48", the character length must be smaller than or equal to 255.'
      end

      @custom_data48 = custom_data48
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data49 Value to be assigned
    def custom_data49=(custom_data49)
      if custom_data49.nil?
        fail ArgumentError, 'custom_data49 cannot be nil'
      end

      if custom_data49.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data49", the character length must be smaller than or equal to 255.'
      end

      @custom_data49 = custom_data49
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_data50 Value to be assigned
    def custom_data50=(custom_data50)
      if custom_data50.nil?
        fail ArgumentError, 'custom_data50 cannot be nil'
      end

      if custom_data50.to_s.length > 255
        fail ArgumentError, 'invalid value for "custom_data50", the character length must be smaller than or equal to 255.'
      end

      @custom_data50 = custom_data50
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          custom_data1 == o.custom_data1 &&
          custom_data2 == o.custom_data2 &&
          custom_data3 == o.custom_data3 &&
          custom_data4 == o.custom_data4 &&
          custom_data5 == o.custom_data5 &&
          custom_data6 == o.custom_data6 &&
          custom_data7 == o.custom_data7 &&
          custom_data8 == o.custom_data8 &&
          custom_data9 == o.custom_data9 &&
          custom_data10 == o.custom_data10 &&
          custom_data11 == o.custom_data11 &&
          custom_data12 == o.custom_data12 &&
          custom_data13 == o.custom_data13 &&
          custom_data14 == o.custom_data14 &&
          custom_data15 == o.custom_data15 &&
          custom_data16 == o.custom_data16 &&
          custom_data17 == o.custom_data17 &&
          custom_data18 == o.custom_data18 &&
          custom_data19 == o.custom_data19 &&
          custom_data20 == o.custom_data20 &&
          custom_data21 == o.custom_data21 &&
          custom_data22 == o.custom_data22 &&
          custom_data23 == o.custom_data23 &&
          custom_data24 == o.custom_data24 &&
          custom_data25 == o.custom_data25 &&
          custom_data26 == o.custom_data26 &&
          custom_data27 == o.custom_data27 &&
          custom_data28 == o.custom_data28 &&
          custom_data29 == o.custom_data29 &&
          custom_data30 == o.custom_data30 &&
          custom_data31 == o.custom_data31 &&
          custom_data32 == o.custom_data32 &&
          custom_data33 == o.custom_data33 &&
          custom_data34 == o.custom_data34 &&
          custom_data35 == o.custom_data35 &&
          custom_data36 == o.custom_data36 &&
          custom_data37 == o.custom_data37 &&
          custom_data38 == o.custom_data38 &&
          custom_data39 == o.custom_data39 &&
          custom_data40 == o.custom_data40 &&
          custom_data41 == o.custom_data41 &&
          custom_data42 == o.custom_data42 &&
          custom_data43 == o.custom_data43 &&
          custom_data44 == o.custom_data44 &&
          custom_data45 == o.custom_data45 &&
          custom_data46 == o.custom_data46 &&
          custom_data47 == o.custom_data47 &&
          custom_data48 == o.custom_data48 &&
          custom_data49 == o.custom_data49 &&
          custom_data50 == o.custom_data50
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [custom_data1, custom_data2, custom_data3, custom_data4, custom_data5, custom_data6, custom_data7, custom_data8, custom_data9, custom_data10, custom_data11, custom_data12, custom_data13, custom_data14, custom_data15, custom_data16, custom_data17, custom_data18, custom_data19, custom_data20, custom_data21, custom_data22, custom_data23, custom_data24, custom_data25, custom_data26, custom_data27, custom_data28, custom_data29, custom_data30, custom_data31, custom_data32, custom_data33, custom_data34, custom_data35, custom_data36, custom_data37, custom_data38, custom_data39, custom_data40, custom_data41, custom_data42, custom_data43, custom_data44, custom_data45, custom_data46, custom_data47, custom_data48, custom_data49, custom_data50].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GmoPaymentApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
