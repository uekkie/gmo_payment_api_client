=begin
#PGマルチペイメントサービス OpenAPIタイプ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.3.1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for GmoPaymentApiClient::CreditcardApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CreditcardApi' do
  before do
    # run before each test
    @api_instance = GmoPaymentApiClient::CreditcardApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CreditcardApi' do
    it 'should create an instance of CreditcardApi' do
      expect(@api_instance).to be_instance_of(GmoPaymentApiClient::CreditcardApi)
    end
  end

  # unit tests for credit_charge
  # 都度支払い
  # カード情報を都度設定して支払う場合に呼び出すAPIです。   Apple Pay、Google Payでのお支払いもこのAPIを利用します。   &lt;span style&#x3D;\&quot;color: #d41f1c\&quot;&gt;※ApplePayでは3Dセキュアおよび不正検知のご利用ができません。&lt;/span&gt; &lt;br&gt; 
  # @param credit_charge_request カード情報の設定方法は以下のいずれかです。   1. トークン化して設定         - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。              - Apple Payトークン         Apple Payに対応した端末で取得したApple PayのPayment tokenをbase64エンコードした値です。         詳細は「BT01_ApplePay開発ガイド」を参照ください。              - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    2. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。      3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。     - カード会員の名前       - トークン化して設定         MPクレカトークンの「カード名義人」が利用されます。     - 直接設定         &#x60;creditInformation.card.cardholderName&#x60;が利用されます。     - カード会員のメールアドレスまたは電話番号       &#x60;payer&#x60;に設定した値が利用されます。       詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
  # @return [CreditChargeResponse]
  describe 'credit_charge test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_get_card_details
  # カード詳細情報取得
  # カードの詳細情報を返すためのAPIです。   「クレカトークン」または「会員ID＋カードID」から紐づいたカード情報を取得します。   利用可能な決済手段はクレジットカードのみです。   ※本APIを利用するには契約が必要です。 
  # @param credit_get_card_details_request カード情報の設定方法は以下のいずれかです。   1. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         本APIではトークンを利用しても無効化されず、支払いAPIで同じMPクレカトークンを設定できます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。  2. 登録済み情報を設定   登録されているカード情報を利用します。   対象の会員IDが必要です。 
  # @param [Hash] opts the optional parameters
  # @return [CreditGetCardDetailsResponse]
  describe 'credit_get_card_details test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_onfile_charge
  # 随時支払い
  # 登録されているカード情報を使って支払う場合に呼び出すAPIです。   対応している決済手段はクレジットカード、Apple Payです。   ただしVISAブランドのカード番号が登録されたApple Payはご利用になれません。   また、VISA以外のブランドについても、将来的に利用できなくなる可能性があります。   &lt;span style&#x3D;\&quot;color: #d41f1c\&quot;&gt;※ApplePayでは3Dセキュアおよび不正検知のご利用ができません。&lt;/span&gt;   Google Payについては、アカウント情報を当サービスに保管できません。   都度支払い時にGoogle Payで使用されたクレジットカード情報を保管することで、通常のクレジットカードとして随時支払いが利用可能です。 
  # @param credit_onfile_charge_request カードのタイプは&#x60;creditOnfileInformation.onfileCard.type&#x60;で設定します。   プロトコルタイプとは異なりカード登録連番を物理モードで設定できません。      3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。   - カード会員の名前     登録されているカード情報の「カード名義人」が利用されます。     カードの登録については、[有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)、[カード登録(/credit/storeCard)](#tag/creditcard/operation/creditStoreCard)を参照ください。 - カード会員のメールアドレスまたは電話番号     &#x60;payer&#x60;に設定した値が利用されます。     詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
  # @return [CreditChargeResponse]
  describe 'credit_onfile_charge test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_store_card
  # カード登録
  # カード情報を会員に紐づけて登録するためのAPIです。   [有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)とは異なり、**カード情報の有効性確認をしません**。   このため、トークンまたは直接設定で登録したカード情報については、随時支払いに失敗する可能があります。   利用可能な決済手段はクレジットカード、Google Payであり、**Apple Payは利用できません**。   ただし、Google Payの場合は、通常のクレジットカードとして会員に紐づけて登録します。   &lt;br&gt; 継続課金サービスや一括決済サービスで登録したカード情報を利用する場合は、以下にご注意ください。   トークンまたは直接設定で登録したカード情報は、有効性確認がされていないため、チャージバックやカード会社契約停止のリスクがあります。   必ず[有効性確認(/credit/verifyCard)](#tag/creditcard/operation/creditVerifyCard)を使用してカード情報を登録してください。   成功した取引情報を使って登録したカード情報は問題ありせん。 
  # @param credit_store_card_request カード情報の設定方法は以下のいずれかです。   1. 成功した取引を設定   成功した支払いや有効性確認時に返された取引ID&#x60;accessId&#x60;を設定することで、該当の取引で利用されたカード情報を登録します。    2. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。        - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    3. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。      登録したカード情報で3Dセキュア認証をする場合、「カード名義人」を含めて登録する必要があります。   - 成功した取引を設定     該当の取引で設定した「カード名義人」が登録されます。   - トークン化して設定     MPクレカトークンの「カード名義人」が登録されます。 - 直接設定     &#x60;creditStoringInformation.card.cardholderName&#x60;が登録されます。 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
  # @return [CreditStoreCardReponse]
  describe 'credit_store_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for credit_verify_card
  # 有効性確認
  # カード情報の有効性確認をするためのAPIです。     加えて有効性の確認が取れたカード情報を会員に紐づけて登録できます。   利用可能な決済手段はクレジットカード、Google Payであり、**Apple Payは利用できません。**   Google Payは通常のクレジットカードとして会員に紐づけて登録します。 
  # @param credit_verify_card_request カード情報の設定方法は以下のいずれかです。   1. トークン化して設定       - MPクレカトークン         当サービス標準のカード情報トークンです。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。        - Google Payトークン         Google Pay APIで取得したPayment tokenをbase64エンコードした値です。         当サービスが提供する&#x60;MpToken.js&#x60;を利用してトークンを取得することができます。         詳細は[トークン決済v2 開発ガイド](https://static.mul-pay.jp/doc/card-token/)を参照ください。         Google Payに関する詳細は[デベロッパー向けドキュメント](https://developers.google.com/pay/api)を参照ください。    2. 登録済み情報を設定   登録されているカード情報を利用します。   対象の会員IDが必要です。    3. 直接設定   [PCI DSS](https://ja.wikipedia.org/wiki/PCI_DSS)の認定を得ている加盟店様のみが利用できます。   本番環境で利用するためにはお申し込みが必要です。    3Dセキュア認証利用時には、以下のカード会員の情報を必ず設定してください。   未設定でもエラーにはなりませんが、変更になる可能性があります。     - カード会員の名前       - トークン化して設定         MPクレカトークンの「カード名義人」が利用されます。     - 登録済み情報を設定         登録されているカード情報の「カード名義人」が利用されます。     - 直接設定         &#x60;creditVerificationInformation.card.cardholderName&#x60;が利用されます。   - カード会員のメールアドレスまたは電話番号       &#x60;payer&#x60;に設定した値が利用されます。詳細は本セクション冒頭の「共通パラメーター対応表」を参照してください。      有効性確認後にカード情報を会員に紐づけて登録した場合、設定した「カード名義人」が登録されます。 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
  # @return [CreditVerifyCardResponse]
  describe 'credit_verify_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for tds2_finalize_charge
  # 3Dセキュア後の支払い
  # 3Dセキュアに進んだ後に最終的に支払いをするためのAPIです。   Chargeリクエスト時に自動オーソリなしの場合には、コールバック後にこのAPIで支払いを完了してください。 
  # @param tds2_finalize_charge_request 対象の取引のID 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
  # @return [Tds2FinalizeChargeResponse]
  describe 'tds2_finalize_charge test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for tds2_finalize_verification
  # 3Dセキュア後の有効性確認
  # 3Dセキュア認証に進んだ後に最終的に有効性確認とカード登録をするためのAPIです。   有効性リクエスト時に自動オーソリなしの場合には、コールバック後にこのAPIで処理を完了してください。 
  # @param tds2_finalize_verification_request 対象の取引のID 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key 冪等キー   UUIDv4に則った書式でリクエスト毎にユニークとなる最大36桁の値。   詳細は[冪等処理](#tag/idempotence)を参照ください。 
  # @return [Tds2FinalizeVerificationResponse]
  describe 'tds2_finalize_verification test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
